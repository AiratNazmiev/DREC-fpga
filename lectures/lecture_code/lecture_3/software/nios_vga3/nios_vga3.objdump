
nios_vga3.elf:     file format elf32-littlenios2
nios_vga3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00003730 memsz 0x00003730 flags r-x
    LOAD off    0x00004750 vaddr 0x00803750 paddr 0x00803a7c align 2**12
         filesz 0x0000032c memsz 0x0000032c flags rw-
    LOAD off    0x00004da8 vaddr 0x00803da8 paddr 0x00803da8 align 2**12
         filesz 0x00000000 memsz 0x000001f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003264  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002a8  008034a8  008034a8  000044a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000032c  00803750  00803a7c  00004750  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001f4  00803da8  00803da8  00004da8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  00000000  00000000  00004a7c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00803f9c  00803f9c  00004a7c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000460  00000000  00000000  00004aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000056a1  00000000  00000000  00004f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001cec  00000000  00000000  0000a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000223f  00000000  00000000  0000c28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b40  00000000  00000000  0000e4cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001bd7  00000000  00000000  0000f00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000006f5  00000000  00000000  00010be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000112d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000170  00000000  00000000  000112f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00012ffe  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00013001  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001300d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001300e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  0001300f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  00013013  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  00013017  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  0001301b  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000058  00000000  00000000  00013024  2**0
                  CONTENTS, READONLY
 27 .jdi          000070a2  00000000  00000000  0001307c  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004ca20  00000000  00000000  0001a11e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008034a8 l    d  .rodata	00000000 .rodata
00803750 l    d  .rwdata	00000000 .rwdata
00803da8 l    d  .bss	00000000 .bss
00000000 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00803f9c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_vga3_bsp//obj/HAL/src/crt0.o
0080027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
008034a8 l     O .rodata	000001e0 Font5x7
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 rand.c
00803dbc l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 alt_load.c
00801b40 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00801c7c l     F .text	00000034 alt_dev_reg
0080376c l     O .rwdata	00000030 sgdma_0
0080379c l     O .rwdata	0000002c parallel_port_0
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00801d30 l     F .text	0000003c alt_get_errno
00802960 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 alt_close.c
00802b00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00802c54 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00802c80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
00803970 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
00803dd4 g     O .bss	00000004 alt_instruction_exception_handler
00801c2c g     F .text	00000050 alt_main
00803e9c g     O .bss	00000100 alt_irq
00803a7c g       *ABS*	00000000 __flash_rwdata_start
00803dac g     O .bss	00000004 dma
00801e90 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0080086c g     F .text	000000b0 delete_ball
008025a8 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
00803128 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
0080052c g     F .text	000000a0 putstr
008020f8 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00800020 g       *ABS*	00000000 __flash_exceptions_start
00803dd8 g     O .bss	00000004 errno
00803dc8 g     O .bss	00000004 alt_argv
0080ba50 g       *ABS*	00000000 _gp
00803ddc g     O .bss	000000c0 ds
008037f0 g     O .rwdata	00000180 alt_fd_list
00802d60 g     F .text	00000090 alt_find_dev
008031dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
008021f0 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00800000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00801a14 g     F .text	00000064 .hidden __udivsi3
0080314c g     F .text	00000090 alt_icache_flush
00800280 g     F .text	000000fc dma_callback
00802328 g     F .text	0000005c alt_avalon_sgdma_stop
00802c0c g     F .text	00000028 alt_dcache_flush
00803a68 g     O .rwdata	00000004 alt_max_fd
0080091c g     F .text	000004bc draw_ball
00800dd8 g     F .text	00000190 display_points
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
00803a74 g     O .rwdata	00000004 _global_impure_ptr
00803f9c g       *ABS*	00000000 __bss_end
00802fd4 g     F .text	000000f0 alt_iic_isr_register
00801d6c g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
00800420 g     F .text	0000010c putch
00803db0 g     O .bss	00000004 fb
00802f88 g     F .text	0000004c alt_ic_irq_enabled
00803dd0 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
008037c8 g     O .rwdata	00000028 alt_dev_null
00802ac4 g     F .text	0000003c alt_up_parallel_port_open_dev
00802384 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
00802c34 g     F .text	00000020 alt_dcache_flush_all
00803a7c g       *ABS*	00000000 __ram_rwdata_end
00803a60 g     O .rwdata	00000008 alt_dev_list
008024c8 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
00803750 g       *ABS*	00000000 __ram_rodata_end
00801a78 g     F .text	00000058 .hidden __umodsi3
00802170 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
0080227c g     F .text	00000054 alt_avalon_sgdma_register_callback
00803f9c g       *ABS*	00000000 end
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00804000 g       *ABS*	00000000 __alt_stack_pointer
00802548 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
00801fa0 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
00802098 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
008032e4 g     F .text	00000190 __call_exitprocs
00800244 g     F .text	0000003c _start
008023e8 g     F .text	00000054 alt_avalon_sgdma_open
00801ae4 g     F .text	0000005c rand
00801ce8 g     F .text	00000048 alt_sys_init
00803750 g       *ABS*	00000000 __ram_rwdata_start
008034a8 g       *ABS*	00000000 __ram_rodata_start
00800fe4 g     F .text	0000005c random_int
00803298 g     F .text	00000030 memcmp
00803f9c g       *ABS*	00000000 __alt_stack_base
0080037c g     F .text	000000a4 vga_pattern
00802cbc g     F .text	000000a4 alt_dev_llist_insert
008022d0 g     F .text	00000058 alt_avalon_sgdma_start
00803da8 g       *ABS*	00000000 __bss_start
00801040 g     F .text	000008dc main
00803dcc g     O .bss	00000004 alt_envp
00801ad0 g     F .text	00000014 srand
00803a50 g     O .rwdata	00000008 alt_sgdma_list
00803a6c g     O .rwdata	00000004 alt_errno
0080191c g     F .text	00000084 .hidden __divsi3
008034a8 g       *ABS*	00000000 __flash_rodata_start
00801cb0 g     F .text	00000038 alt_irq_init
008030c4 g     F .text	00000064 alt_release_fd
00803750 g     O .rwdata	00000019 ball_sprite
00803db4 g     O .bss	00000001 frame
00800f68 g     F .text	0000007c display_final_message
00803a78 g     O .rwdata	00000004 _impure_ptr
00803dc4 g     O .bss	00000004 alt_argc
008005cc g     F .text	000002a0 draw_player
00800020 g       .exceptions	00000000 alt_irq_entry
00803a58 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00802e24 g     F .text	00000050 alt_ic_isr_register
00803a7c g       *ABS*	00000000 _edata
00803f9c g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00802efc g     F .text	0000008c alt_ic_irq_disable
0080243c g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
00803278 g     F .text	00000020 exit
008019a0 g     F .text	00000074 .hidden __modsi3
00804000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00803db8 g     O .bss	00000004 keys
00803474 g     F .text	00000034 _exit
008032c8 g     F .text	0000001c strlen
00803da8 g     O .bss	00000001 dma_chain_len
00802df0 g     F .text	00000034 alt_icache_flush_all
00803a70 g     O .rwdata	00000004 alt_priority_mask
00802e74 g     F .text	00000088 alt_ic_irq_enable
00802014 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00802b3c g     F .text	000000d0 close
00801ba8 g     F .text	00000084 alt_load
00802a1c g     F .text	000000a8 alt_avalon_sgdma_init



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00808014 	movui	r2,512
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <_gp+0xffff45b4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_controller_0>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802034 	movhi	r2,128
  800140:	108fa704 	addi	r2,r2,16028
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802034 	movhi	r2,128
  800158:	108fa704 	addi	r2,r2,16028
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <_gp+0xffff46dc>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <_gp+0xffff46d0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a0e117 	ldw	r2,-31868(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a0e117 	ldw	r2,-31868(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800244:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
  800248:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  80024c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800250:	d6ae9414 	ori	gp,gp,47696
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800254:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800258:	108f6a14 	ori	r2,r2,15784

    movhi r3, %hi(__bss_end)
  80025c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800260:	18cfe714 	ori	r3,r3,16284

    beq r2, r3, 1f
  800264:	10c00326 	beq	r2,r3,800274 <_start+0x30>

0:
    stw zero, (r2)
  800268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800270:	10fffd36 	bltu	r2,r3,800268 <_gp+0xffff4818>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800274:	0801ba80 	call	801ba8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800278:	0801c2c0 	call	801c2c <alt_main>

0080027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80027c:	003fff06 	br	80027c <_gp+0xffff482c>

00800280 <dma_callback>:
alt_u8 *fb;
alt_u8 dma_chain_len=0;
alt_up_parallel_port_dev *keys;
alt_u8 frame;

void dma_callback(void *context){
  800280:	defffd04 	addi	sp,sp,-12
  800284:	df000215 	stw	fp,8(sp)
  800288:	df000204 	addi	fp,sp,8
  80028c:	e13fff15 	stw	r4,-4(fp)
	for(alt_u8 i=0;i<dma_chain_len;i++) {
  800290:	e03ffe05 	stb	zero,-8(fp)
  800294:	00003006 	br	800358 <dma_callback+0xd8>
		if (!(ds[i].control & ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK)){
  800298:	e0fffe03 	ldbu	r3,-8(fp)
  80029c:	00802034 	movhi	r2,128
  8002a0:	108f7704 	addi	r2,r2,15836
  8002a4:	1806917a 	slli	r3,r3,5
  8002a8:	10c5883a 	add	r2,r2,r3
  8002ac:	108007c4 	addi	r2,r2,31
  8002b0:	10800003 	ldbu	r2,0(r2)
  8002b4:	10803fcc 	andi	r2,r2,255
  8002b8:	1080201c 	xori	r2,r2,128
  8002bc:	10bfe004 	addi	r2,r2,-128
  8002c0:	10002216 	blt	r2,zero,80034c <dma_callback+0xcc>
				ds[i].control |= ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK;
  8002c4:	e0fffe03 	ldbu	r3,-8(fp)
  8002c8:	e13ffe03 	ldbu	r4,-8(fp)
  8002cc:	00802034 	movhi	r2,128
  8002d0:	108f7704 	addi	r2,r2,15836
  8002d4:	2008917a 	slli	r4,r4,5
  8002d8:	1105883a 	add	r2,r2,r4
  8002dc:	108007c4 	addi	r2,r2,31
  8002e0:	11000003 	ldbu	r4,0(r2)
  8002e4:	00bfe004 	movi	r2,-128
  8002e8:	2084b03a 	or	r2,r4,r2
  8002ec:	1009883a 	mov	r4,r2
  8002f0:	00802034 	movhi	r2,128
  8002f4:	108f7704 	addi	r2,r2,15836
  8002f8:	1806917a 	slli	r3,r3,5
  8002fc:	10c5883a 	add	r2,r2,r3
  800300:	108007c4 	addi	r2,r2,31
  800304:	11000005 	stb	r4,0(r2)
				ds[i].actual_bytes_transferred = 0;
  800308:	e0fffe03 	ldbu	r3,-8(fp)
  80030c:	00802034 	movhi	r2,128
  800310:	108f7704 	addi	r2,r2,15836
  800314:	1806917a 	slli	r3,r3,5
  800318:	10c5883a 	add	r2,r2,r3
  80031c:	10800704 	addi	r2,r2,28
  800320:	10c00003 	ldbu	r3,0(r2)
  800324:	1806703a 	and	r3,r3,zero
  800328:	10c00005 	stb	r3,0(r2)
  80032c:	10c00043 	ldbu	r3,1(r2)
  800330:	1806703a 	and	r3,r3,zero
  800334:	10c00045 	stb	r3,1(r2)
				if(i==0)
  800338:	e0bffe03 	ldbu	r2,-8(fp)
  80033c:	1000031e 	bne	r2,zero,80034c <dma_callback+0xcc>
					frame++;
  800340:	d0a0d903 	ldbu	r2,-31900(gp)
  800344:	10800044 	addi	r2,r2,1
  800348:	d0a0d905 	stb	r2,-31900(gp)
alt_u8 dma_chain_len=0;
alt_up_parallel_port_dev *keys;
alt_u8 frame;

void dma_callback(void *context){
	for(alt_u8 i=0;i<dma_chain_len;i++) {
  80034c:	e0bffe03 	ldbu	r2,-8(fp)
  800350:	10800044 	addi	r2,r2,1
  800354:	e0bffe05 	stb	r2,-8(fp)
  800358:	d0a0d603 	ldbu	r2,-31912(gp)
  80035c:	e0fffe03 	ldbu	r3,-8(fp)
  800360:	10803fcc 	andi	r2,r2,255
  800364:	18bfcc36 	bltu	r3,r2,800298 <_gp+0xffff4848>
				ds[i].actual_bytes_transferred = 0;
				if(i==0)
					frame++;
		}
	}
}
  800368:	0001883a 	nop
  80036c:	e037883a 	mov	sp,fp
  800370:	df000017 	ldw	fp,0(sp)
  800374:	dec00104 	addi	sp,sp,4
  800378:	f800283a 	ret

0080037c <vga_pattern>:
#define UPPER_BORDER_H 15
#define LOWER_BORDER_H 15
#define FIELD_UPPER_BORDER UPPER_BORDER_H
#define FIELD_LOWER_BORDER (VIDEO_H - LOWER_BORDER_H)

void vga_pattern(){
  80037c:	defffc04 	addi	sp,sp,-16
  800380:	df000315 	stw	fp,12(sp)
  800384:	df000304 	addi	fp,sp,12
	alt_u8 *tfb;
	tfb = fb;
  800388:	d0a0d817 	ldw	r2,-31904(gp)
  80038c:	e0bffd15 	stw	r2,-12(fp)
	for(alt_u32 i=0; i < VIDEO_H; ++i)
  800390:	e03ffe15 	stw	zero,-8(fp)
  800394:	00001a06 	br	800400 <vga_pattern+0x84>
		for(alt_u32 j=0; j < VIDEO_W; ++j){
  800398:	e03fff15 	stw	zero,-4(fp)
  80039c:	00001206 	br	8003e8 <vga_pattern+0x6c>
			if ((i < UPPER_BORDER_H) || (i > VIDEO_H-LOWER_BORDER_H)) { // frame
  8003a0:	e0bffe17 	ldw	r2,-8(fp)
  8003a4:	108003f0 	cmpltui	r2,r2,15
  8003a8:	1000031e 	bne	r2,zero,8003b8 <vga_pattern+0x3c>
  8003ac:	e0bffe17 	ldw	r2,-8(fp)
  8003b0:	108074b0 	cmpltui	r2,r2,466
  8003b4:	1000041e 	bne	r2,zero,8003c8 <vga_pattern+0x4c>
				*tfb = BORDER_COLOR;
  8003b8:	e0bffd17 	ldw	r2,-12(fp)
  8003bc:	00ffffc4 	movi	r3,-1
  8003c0:	10c00005 	stb	r3,0(r2)
  8003c4:	00000206 	br	8003d0 <vga_pattern+0x54>
			} else {
				*tfb = BACKGROUND_COLOR;
  8003c8:	e0bffd17 	ldw	r2,-12(fp)
  8003cc:	10000005 	stb	zero,0(r2)
			}

			tfb++;
  8003d0:	e0bffd17 	ldw	r2,-12(fp)
  8003d4:	10800044 	addi	r2,r2,1
  8003d8:	e0bffd15 	stw	r2,-12(fp)

void vga_pattern(){
	alt_u8 *tfb;
	tfb = fb;
	for(alt_u32 i=0; i < VIDEO_H; ++i)
		for(alt_u32 j=0; j < VIDEO_W; ++j){
  8003dc:	e0bfff17 	ldw	r2,-4(fp)
  8003e0:	10800044 	addi	r2,r2,1
  8003e4:	e0bfff15 	stw	r2,-4(fp)
  8003e8:	e0bfff17 	ldw	r2,-4(fp)
  8003ec:	1080a030 	cmpltui	r2,r2,640
  8003f0:	103feb1e 	bne	r2,zero,8003a0 <_gp+0xffff4950>
#define FIELD_LOWER_BORDER (VIDEO_H - LOWER_BORDER_H)

void vga_pattern(){
	alt_u8 *tfb;
	tfb = fb;
	for(alt_u32 i=0; i < VIDEO_H; ++i)
  8003f4:	e0bffe17 	ldw	r2,-8(fp)
  8003f8:	10800044 	addi	r2,r2,1
  8003fc:	e0bffe15 	stw	r2,-8(fp)
  800400:	e0bffe17 	ldw	r2,-8(fp)
  800404:	10807830 	cmpltui	r2,r2,480
  800408:	103fe31e 	bne	r2,zero,800398 <_gp+0xffff4948>
				*tfb = BACKGROUND_COLOR;
			}

			tfb++;
		}
}
  80040c:	0001883a 	nop
  800410:	e037883a 	mov	sp,fp
  800414:	df000017 	ldw	fp,0(sp)
  800418:	dec00104 	addi	sp,sp,4
  80041c:	f800283a 	ret

00800420 <putch>:

#define TEXT_PLACE_H (VIDEO_H-10)

void putch(alt_u16 x, alt_u16 y, alt_u8 ch, alt_u8 color){
  800420:	defff904 	addi	sp,sp,-28
  800424:	df000615 	stw	fp,24(sp)
  800428:	df000604 	addi	fp,sp,24
  80042c:	2011883a 	mov	r8,r4
  800430:	2809883a 	mov	r4,r5
  800434:	3007883a 	mov	r3,r6
  800438:	3805883a 	mov	r2,r7
  80043c:	e23ffc0d 	sth	r8,-16(fp)
  800440:	e13ffd0d 	sth	r4,-12(fp)
  800444:	e0fffe05 	stb	r3,-8(fp)
  800448:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 *tfb;
	tfb = fb;
  80044c:	d0a0d817 	ldw	r2,-31904(gp)
  800450:	e0bffa15 	stw	r2,-24(fp)
	tfb += y*VIDEO_W + x;
  800454:	e0bffd0b 	ldhu	r2,-12(fp)
  800458:	10c0a024 	muli	r3,r2,640
  80045c:	e0bffc0b 	ldhu	r2,-16(fp)
  800460:	1885883a 	add	r2,r3,r2
  800464:	1007883a 	mov	r3,r2
  800468:	e0bffa17 	ldw	r2,-24(fp)
  80046c:	10c5883a 	add	r2,r2,r3
  800470:	e0bffa15 	stw	r2,-24(fp)
	ch -=0x20;
  800474:	e0bffe03 	ldbu	r2,-8(fp)
  800478:	10bff804 	addi	r2,r2,-32
  80047c:	e0bffe05 	stb	r2,-8(fp)
	for(alt_u8 i=0;i<8;i++){
  800480:	e03ffb05 	stb	zero,-20(fp)
  800484:	00002106 	br	80050c <putch+0xec>
		for(alt_u8 j=0;j<5;j++) {
  800488:	e03ffb45 	stb	zero,-19(fp)
  80048c:	00001606 	br	8004e8 <putch+0xc8>
			if (Font5x7[ch*5+j] & (1<<i)) *tfb = color;
  800490:	e0bffe03 	ldbu	r2,-8(fp)
  800494:	10c00164 	muli	r3,r2,5
  800498:	e0bffb43 	ldbu	r2,-19(fp)
  80049c:	1887883a 	add	r3,r3,r2
  8004a0:	00802034 	movhi	r2,128
  8004a4:	108d2a04 	addi	r2,r2,13480
  8004a8:	10c5883a 	add	r2,r2,r3
  8004ac:	10800003 	ldbu	r2,0(r2)
  8004b0:	10c03fcc 	andi	r3,r2,255
  8004b4:	e0bffb03 	ldbu	r2,-20(fp)
  8004b8:	1885d83a 	sra	r2,r3,r2
  8004bc:	1080004c 	andi	r2,r2,1
  8004c0:	10000326 	beq	r2,zero,8004d0 <putch+0xb0>
  8004c4:	e0bffa17 	ldw	r2,-24(fp)
  8004c8:	e0ffff03 	ldbu	r3,-4(fp)
  8004cc:	10c00005 	stb	r3,0(r2)
			tfb++;
  8004d0:	e0bffa17 	ldw	r2,-24(fp)
  8004d4:	10800044 	addi	r2,r2,1
  8004d8:	e0bffa15 	stw	r2,-24(fp)
	alt_u8 *tfb;
	tfb = fb;
	tfb += y*VIDEO_W + x;
	ch -=0x20;
	for(alt_u8 i=0;i<8;i++){
		for(alt_u8 j=0;j<5;j++) {
  8004dc:	e0bffb43 	ldbu	r2,-19(fp)
  8004e0:	10800044 	addi	r2,r2,1
  8004e4:	e0bffb45 	stb	r2,-19(fp)
  8004e8:	e0bffb43 	ldbu	r2,-19(fp)
  8004ec:	10800170 	cmpltui	r2,r2,5
  8004f0:	103fe71e 	bne	r2,zero,800490 <_gp+0xffff4a40>
			if (Font5x7[ch*5+j] & (1<<i)) *tfb = color;
			tfb++;
		}
		tfb += VIDEO_W-5;
  8004f4:	e0bffa17 	ldw	r2,-24(fp)
  8004f8:	10809ec4 	addi	r2,r2,635
  8004fc:	e0bffa15 	stw	r2,-24(fp)
void putch(alt_u16 x, alt_u16 y, alt_u8 ch, alt_u8 color){
	alt_u8 *tfb;
	tfb = fb;
	tfb += y*VIDEO_W + x;
	ch -=0x20;
	for(alt_u8 i=0;i<8;i++){
  800500:	e0bffb03 	ldbu	r2,-20(fp)
  800504:	10800044 	addi	r2,r2,1
  800508:	e0bffb05 	stb	r2,-20(fp)
  80050c:	e0bffb03 	ldbu	r2,-20(fp)
  800510:	10800230 	cmpltui	r2,r2,8
  800514:	103fdc1e 	bne	r2,zero,800488 <_gp+0xffff4a38>
			if (Font5x7[ch*5+j] & (1<<i)) *tfb = color;
			tfb++;
		}
		tfb += VIDEO_W-5;
	}
}
  800518:	0001883a 	nop
  80051c:	e037883a 	mov	sp,fp
  800520:	df000017 	ldw	fp,0(sp)
  800524:	dec00104 	addi	sp,sp,4
  800528:	f800283a 	ret

0080052c <putstr>:

void putstr(alt_u16 x, alt_u16 y, char *ch, alt_u8 color){
  80052c:	defffa04 	addi	sp,sp,-24
  800530:	dfc00515 	stw	ra,20(sp)
  800534:	df000415 	stw	fp,16(sp)
  800538:	df000404 	addi	fp,sp,16
  80053c:	2807883a 	mov	r3,r5
  800540:	e1bffe15 	stw	r6,-8(fp)
  800544:	3805883a 	mov	r2,r7
  800548:	e13ffc0d 	sth	r4,-16(fp)
  80054c:	e0fffd0d 	sth	r3,-12(fp)
  800550:	e0bfff05 	stb	r2,-4(fp)
	while (*ch) {
  800554:	00001106 	br	80059c <putstr+0x70>
		putch(x,y,(alt_u8)*ch, color);
  800558:	e0fffc0b 	ldhu	r3,-16(fp)
  80055c:	e13ffd0b 	ldhu	r4,-12(fp)
  800560:	e0bffe17 	ldw	r2,-8(fp)
  800564:	10800003 	ldbu	r2,0(r2)
  800568:	10803fcc 	andi	r2,r2,255
  80056c:	e17fff03 	ldbu	r5,-4(fp)
  800570:	280f883a 	mov	r7,r5
  800574:	100d883a 	mov	r6,r2
  800578:	200b883a 	mov	r5,r4
  80057c:	1809883a 	mov	r4,r3
  800580:	08004200 	call	800420 <putch>
		ch++;
  800584:	e0bffe17 	ldw	r2,-8(fp)
  800588:	10800044 	addi	r2,r2,1
  80058c:	e0bffe15 	stw	r2,-8(fp)
		x+=6;
  800590:	e0bffc0b 	ldhu	r2,-16(fp)
  800594:	10800184 	addi	r2,r2,6
  800598:	e0bffc0d 	sth	r2,-16(fp)
		tfb += VIDEO_W-5;
	}
}

void putstr(alt_u16 x, alt_u16 y, char *ch, alt_u8 color){
	while (*ch) {
  80059c:	e0bffe17 	ldw	r2,-8(fp)
  8005a0:	10800003 	ldbu	r2,0(r2)
  8005a4:	10803fcc 	andi	r2,r2,255
  8005a8:	1080201c 	xori	r2,r2,128
  8005ac:	10bfe004 	addi	r2,r2,-128
  8005b0:	103fe91e 	bne	r2,zero,800558 <_gp+0xffff4b08>
		putch(x,y,(alt_u8)*ch, color);
		ch++;
		x+=6;
	}
}
  8005b4:	0001883a 	nop
  8005b8:	e037883a 	mov	sp,fp
  8005bc:	dfc00117 	ldw	ra,4(sp)
  8005c0:	df000017 	ldw	fp,0(sp)
  8005c4:	dec00204 	addi	sp,sp,8
  8005c8:	f800283a 	ret

008005cc <draw_player>:
	alt_u8 color;
} Player;

// It's guaranteed that shift is valid
// coordinates change must be done after drawing
void draw_player(alt_u8 *fb, Player *player, DIRECTION dir) {
  8005cc:	defffb04 	addi	sp,sp,-20
  8005d0:	df000415 	stw	fp,16(sp)
  8005d4:	df000404 	addi	fp,sp,16
  8005d8:	e13ffd15 	stw	r4,-12(fp)
  8005dc:	e17ffe15 	stw	r5,-8(fp)
  8005e0:	e1bfff15 	stw	r6,-4(fp)
	alt_u16 i, j;
	switch (dir) {
  8005e4:	e0bfff17 	ldw	r2,-4(fp)
  8005e8:	10c00060 	cmpeqi	r3,r2,1
  8005ec:	18003d1e 	bne	r3,zero,8006e4 <draw_player+0x118>
  8005f0:	0080032e 	bgeu	zero,r2,800600 <draw_player+0x34>
  8005f4:	108000a0 	cmpeqi	r2,r2,2
  8005f8:	1000721e 	bne	r2,zero,8007c4 <draw_player+0x1f8>
			}
		}
	break;

	}
}
  8005fc:	00009606 	br	800858 <draw_player+0x28c>
// coordinates change must be done after drawing
void draw_player(alt_u8 *fb, Player *player, DIRECTION dir) {
	alt_u16 i, j;
	switch (dir) {
	case UP:
		for (i = player->x; i < player->x + PLAYER_W; ++i) { // WHY ball->w and ball->h don't work?
  800600:	e0bffe17 	ldw	r2,-8(fp)
  800604:	1080000b 	ldhu	r2,0(r2)
  800608:	e0bffc0d 	sth	r2,-16(fp)
  80060c:	00002e06 	br	8006c8 <draw_player+0xfc>
			fb[(player->y + PLAYER_H - 1)*VIDEO_W + i] = player->y <= FIELD_LOWER_BORDER ?
  800610:	e0bffe17 	ldw	r2,-8(fp)
  800614:	1080008b 	ldhu	r2,2(r2)
  800618:	10bfffcc 	andi	r2,r2,65535
  80061c:	108018c4 	addi	r2,r2,99
  800620:	10c0a024 	muli	r3,r2,640
  800624:	e0bffc0b 	ldhu	r2,-16(fp)
  800628:	1885883a 	add	r2,r3,r2
  80062c:	1007883a 	mov	r3,r2
  800630:	e0bffd17 	ldw	r2,-12(fp)
  800634:	10c7883a 	add	r3,r2,r3
  800638:	e0bffe17 	ldw	r2,-8(fp)
  80063c:	1080008b 	ldhu	r2,2(r2)
  800640:	10bfffcc 	andi	r2,r2,65535
  800644:	108074a8 	cmpgeui	r2,r2,466
  800648:	1000021e 	bne	r2,zero,800654 <draw_player+0x88>
  80064c:	0005883a 	mov	r2,zero
  800650:	00000106 	br	800658 <draw_player+0x8c>
  800654:	00bfffc4 	movi	r2,-1
  800658:	18800005 	stb	r2,0(r3)
														 BACKGROUND_COLOR : BORDER_COLOR;
			for (j = player->y - 1; j < player->y + PLAYER_H - 1; ++j) {
  80065c:	e0bffe17 	ldw	r2,-8(fp)
  800660:	1080008b 	ldhu	r2,2(r2)
  800664:	10bfffc4 	addi	r2,r2,-1
  800668:	e0bffc8d 	sth	r2,-14(fp)
  80066c:	00000d06 	br	8006a4 <draw_player+0xd8>
				fb[j*VIDEO_W + i] = player->color;
  800670:	e0bffc8b 	ldhu	r2,-14(fp)
  800674:	10c0a024 	muli	r3,r2,640
  800678:	e0bffc0b 	ldhu	r2,-16(fp)
  80067c:	1885883a 	add	r2,r3,r2
  800680:	1007883a 	mov	r3,r2
  800684:	e0bffd17 	ldw	r2,-12(fp)
  800688:	10c5883a 	add	r2,r2,r3
  80068c:	e0fffe17 	ldw	r3,-8(fp)
  800690:	18c00103 	ldbu	r3,4(r3)
  800694:	10c00005 	stb	r3,0(r2)
	switch (dir) {
	case UP:
		for (i = player->x; i < player->x + PLAYER_W; ++i) { // WHY ball->w and ball->h don't work?
			fb[(player->y + PLAYER_H - 1)*VIDEO_W + i] = player->y <= FIELD_LOWER_BORDER ?
														 BACKGROUND_COLOR : BORDER_COLOR;
			for (j = player->y - 1; j < player->y + PLAYER_H - 1; ++j) {
  800698:	e0bffc8b 	ldhu	r2,-14(fp)
  80069c:	10800044 	addi	r2,r2,1
  8006a0:	e0bffc8d 	sth	r2,-14(fp)
  8006a4:	e0fffc8b 	ldhu	r3,-14(fp)
  8006a8:	e0bffe17 	ldw	r2,-8(fp)
  8006ac:	1080008b 	ldhu	r2,2(r2)
  8006b0:	10bfffcc 	andi	r2,r2,65535
  8006b4:	108018c4 	addi	r2,r2,99
  8006b8:	18bfed16 	blt	r3,r2,800670 <_gp+0xffff4c20>
// coordinates change must be done after drawing
void draw_player(alt_u8 *fb, Player *player, DIRECTION dir) {
	alt_u16 i, j;
	switch (dir) {
	case UP:
		for (i = player->x; i < player->x + PLAYER_W; ++i) { // WHY ball->w and ball->h don't work?
  8006bc:	e0bffc0b 	ldhu	r2,-16(fp)
  8006c0:	10800044 	addi	r2,r2,1
  8006c4:	e0bffc0d 	sth	r2,-16(fp)
  8006c8:	e0fffc0b 	ldhu	r3,-16(fp)
  8006cc:	e0bffe17 	ldw	r2,-8(fp)
  8006d0:	1080000b 	ldhu	r2,0(r2)
  8006d4:	10bfffcc 	andi	r2,r2,65535
  8006d8:	10800144 	addi	r2,r2,5
  8006dc:	18bfcc16 	blt	r3,r2,800610 <_gp+0xffff4bc0>
														 BACKGROUND_COLOR : BORDER_COLOR;
			for (j = player->y - 1; j < player->y + PLAYER_H - 1; ++j) {
				fb[j*VIDEO_W + i] = player->color;
			}
		}
	break;
  8006e0:	00005d06 	br	800858 <draw_player+0x28c>

	case DOWN:
		for (i = player->x; i < player->x + PLAYER_W; ++i) { // WHY ball->w and ball->h don't work?
  8006e4:	e0bffe17 	ldw	r2,-8(fp)
  8006e8:	1080000b 	ldhu	r2,0(r2)
  8006ec:	e0bffc0d 	sth	r2,-16(fp)
  8006f0:	00002d06 	br	8007a8 <draw_player+0x1dc>
			fb[player->y*VIDEO_W + i] = player->y >= FIELD_UPPER_BORDER ?
  8006f4:	e0bffe17 	ldw	r2,-8(fp)
  8006f8:	1080008b 	ldhu	r2,2(r2)
  8006fc:	10bfffcc 	andi	r2,r2,65535
  800700:	10c0a024 	muli	r3,r2,640
  800704:	e0bffc0b 	ldhu	r2,-16(fp)
  800708:	1885883a 	add	r2,r3,r2
  80070c:	1007883a 	mov	r3,r2
  800710:	e0bffd17 	ldw	r2,-12(fp)
  800714:	10c7883a 	add	r3,r2,r3
  800718:	e0bffe17 	ldw	r2,-8(fp)
  80071c:	1080008b 	ldhu	r2,2(r2)
  800720:	10bfffcc 	andi	r2,r2,65535
  800724:	108003f0 	cmpltui	r2,r2,15
  800728:	1000021e 	bne	r2,zero,800734 <draw_player+0x168>
  80072c:	0005883a 	mov	r2,zero
  800730:	00000106 	br	800738 <draw_player+0x16c>
  800734:	00bfffc4 	movi	r2,-1
  800738:	18800005 	stb	r2,0(r3)
										BACKGROUND_COLOR : BORDER_COLOR;
			for (j = player->y + 1; j < player->y + PLAYER_H + 1; ++j) {
  80073c:	e0bffe17 	ldw	r2,-8(fp)
  800740:	1080008b 	ldhu	r2,2(r2)
  800744:	10800044 	addi	r2,r2,1
  800748:	e0bffc8d 	sth	r2,-14(fp)
  80074c:	00000d06 	br	800784 <draw_player+0x1b8>
				fb[j*VIDEO_W + i] = player->color;
  800750:	e0bffc8b 	ldhu	r2,-14(fp)
  800754:	10c0a024 	muli	r3,r2,640
  800758:	e0bffc0b 	ldhu	r2,-16(fp)
  80075c:	1885883a 	add	r2,r3,r2
  800760:	1007883a 	mov	r3,r2
  800764:	e0bffd17 	ldw	r2,-12(fp)
  800768:	10c5883a 	add	r2,r2,r3
  80076c:	e0fffe17 	ldw	r3,-8(fp)
  800770:	18c00103 	ldbu	r3,4(r3)
  800774:	10c00005 	stb	r3,0(r2)

	case DOWN:
		for (i = player->x; i < player->x + PLAYER_W; ++i) { // WHY ball->w and ball->h don't work?
			fb[player->y*VIDEO_W + i] = player->y >= FIELD_UPPER_BORDER ?
										BACKGROUND_COLOR : BORDER_COLOR;
			for (j = player->y + 1; j < player->y + PLAYER_H + 1; ++j) {
  800778:	e0bffc8b 	ldhu	r2,-14(fp)
  80077c:	10800044 	addi	r2,r2,1
  800780:	e0bffc8d 	sth	r2,-14(fp)
  800784:	e0fffc8b 	ldhu	r3,-14(fp)
  800788:	e0bffe17 	ldw	r2,-8(fp)
  80078c:	1080008b 	ldhu	r2,2(r2)
  800790:	10bfffcc 	andi	r2,r2,65535
  800794:	10801944 	addi	r2,r2,101
  800798:	18bfed16 	blt	r3,r2,800750 <_gp+0xffff4d00>
			}
		}
	break;

	case DOWN:
		for (i = player->x; i < player->x + PLAYER_W; ++i) { // WHY ball->w and ball->h don't work?
  80079c:	e0bffc0b 	ldhu	r2,-16(fp)
  8007a0:	10800044 	addi	r2,r2,1
  8007a4:	e0bffc0d 	sth	r2,-16(fp)
  8007a8:	e0fffc0b 	ldhu	r3,-16(fp)
  8007ac:	e0bffe17 	ldw	r2,-8(fp)
  8007b0:	1080000b 	ldhu	r2,0(r2)
  8007b4:	10bfffcc 	andi	r2,r2,65535
  8007b8:	10800144 	addi	r2,r2,5
  8007bc:	18bfcd16 	blt	r3,r2,8006f4 <_gp+0xffff4ca4>
										BACKGROUND_COLOR : BORDER_COLOR;
			for (j = player->y + 1; j < player->y + PLAYER_H + 1; ++j) {
				fb[j*VIDEO_W + i] = player->color;
			}
		}
	break;
  8007c0:	00002506 	br	800858 <draw_player+0x28c>

	case IDLE:
		for (i = player->x; i < player->x + PLAYER_W; ++i) { // WHY ball->w and ball->h don't work?
  8007c4:	e0bffe17 	ldw	r2,-8(fp)
  8007c8:	1080000b 	ldhu	r2,0(r2)
  8007cc:	e0bffc0d 	sth	r2,-16(fp)
  8007d0:	00001a06 	br	80083c <draw_player+0x270>
			for (j = player->y; j < player->y + PLAYER_H; ++j) {
  8007d4:	e0bffe17 	ldw	r2,-8(fp)
  8007d8:	1080008b 	ldhu	r2,2(r2)
  8007dc:	e0bffc8d 	sth	r2,-14(fp)
  8007e0:	00000d06 	br	800818 <draw_player+0x24c>
				fb[j*VIDEO_W + i] = player->color;
  8007e4:	e0bffc8b 	ldhu	r2,-14(fp)
  8007e8:	10c0a024 	muli	r3,r2,640
  8007ec:	e0bffc0b 	ldhu	r2,-16(fp)
  8007f0:	1885883a 	add	r2,r3,r2
  8007f4:	1007883a 	mov	r3,r2
  8007f8:	e0bffd17 	ldw	r2,-12(fp)
  8007fc:	10c5883a 	add	r2,r2,r3
  800800:	e0fffe17 	ldw	r3,-8(fp)
  800804:	18c00103 	ldbu	r3,4(r3)
  800808:	10c00005 	stb	r3,0(r2)
		}
	break;

	case IDLE:
		for (i = player->x; i < player->x + PLAYER_W; ++i) { // WHY ball->w and ball->h don't work?
			for (j = player->y; j < player->y + PLAYER_H; ++j) {
  80080c:	e0bffc8b 	ldhu	r2,-14(fp)
  800810:	10800044 	addi	r2,r2,1
  800814:	e0bffc8d 	sth	r2,-14(fp)
  800818:	e0fffc8b 	ldhu	r3,-14(fp)
  80081c:	e0bffe17 	ldw	r2,-8(fp)
  800820:	1080008b 	ldhu	r2,2(r2)
  800824:	10bfffcc 	andi	r2,r2,65535
  800828:	10801904 	addi	r2,r2,100
  80082c:	18bfed16 	blt	r3,r2,8007e4 <_gp+0xffff4d94>
			}
		}
	break;

	case IDLE:
		for (i = player->x; i < player->x + PLAYER_W; ++i) { // WHY ball->w and ball->h don't work?
  800830:	e0bffc0b 	ldhu	r2,-16(fp)
  800834:	10800044 	addi	r2,r2,1
  800838:	e0bffc0d 	sth	r2,-16(fp)
  80083c:	e0fffc0b 	ldhu	r3,-16(fp)
  800840:	e0bffe17 	ldw	r2,-8(fp)
  800844:	1080000b 	ldhu	r2,0(r2)
  800848:	10bfffcc 	andi	r2,r2,65535
  80084c:	10800144 	addi	r2,r2,5
  800850:	18bfe016 	blt	r3,r2,8007d4 <_gp+0xffff4d84>
			for (j = player->y; j < player->y + PLAYER_H; ++j) {
				fb[j*VIDEO_W + i] = player->color;
			}
		}
	break;
  800854:	0001883a 	nop

	}
}
  800858:	0001883a 	nop
  80085c:	e037883a 	mov	sp,fp
  800860:	df000017 	ldw	fp,0(sp)
  800864:	dec00104 	addi	sp,sp,4
  800868:	f800283a 	ret

0080086c <delete_ball>:
		{WHITE, BLACK, WHITE, BLACK, WHITE},
		{WHITE, WHITE, WHITE, WHITE, WHITE}
};


void delete_ball(alt_u8 *fb, Ball *ball) {
  80086c:	defffc04 	addi	sp,sp,-16
  800870:	df000315 	stw	fp,12(sp)
  800874:	df000304 	addi	fp,sp,12
  800878:	e13ffe15 	stw	r4,-8(fp)
  80087c:	e17fff15 	stw	r5,-4(fp)
	alt_u16 i, j;
	for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800880:	e0bfff17 	ldw	r2,-4(fp)
  800884:	1080000b 	ldhu	r2,0(r2)
  800888:	e0bffd0d 	sth	r2,-12(fp)
  80088c:	00001806 	br	8008f0 <delete_ball+0x84>
		for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800890:	e0bfff17 	ldw	r2,-4(fp)
  800894:	1080008b 	ldhu	r2,2(r2)
  800898:	e0bffd8d 	sth	r2,-10(fp)
  80089c:	00000b06 	br	8008cc <delete_ball+0x60>
			fb[j*VIDEO_W + i] = BACKGROUND_COLOR;
  8008a0:	e0bffd8b 	ldhu	r2,-10(fp)
  8008a4:	10c0a024 	muli	r3,r2,640
  8008a8:	e0bffd0b 	ldhu	r2,-12(fp)
  8008ac:	1885883a 	add	r2,r3,r2
  8008b0:	1007883a 	mov	r3,r2
  8008b4:	e0bffe17 	ldw	r2,-8(fp)
  8008b8:	10c5883a 	add	r2,r2,r3
  8008bc:	10000005 	stb	zero,0(r2)


void delete_ball(alt_u8 *fb, Ball *ball) {
	alt_u16 i, j;
	for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
		for (j = ball->y; j < ball->y + BALL_H; ++j) {
  8008c0:	e0bffd8b 	ldhu	r2,-10(fp)
  8008c4:	10800044 	addi	r2,r2,1
  8008c8:	e0bffd8d 	sth	r2,-10(fp)
  8008cc:	e0fffd8b 	ldhu	r3,-10(fp)
  8008d0:	e0bfff17 	ldw	r2,-4(fp)
  8008d4:	1080008b 	ldhu	r2,2(r2)
  8008d8:	10bfffcc 	andi	r2,r2,65535
  8008dc:	10800144 	addi	r2,r2,5
  8008e0:	18bfef16 	blt	r3,r2,8008a0 <_gp+0xffff4e50>
};


void delete_ball(alt_u8 *fb, Ball *ball) {
	alt_u16 i, j;
	for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  8008e4:	e0bffd0b 	ldhu	r2,-12(fp)
  8008e8:	10800044 	addi	r2,r2,1
  8008ec:	e0bffd0d 	sth	r2,-12(fp)
  8008f0:	e0fffd0b 	ldhu	r3,-12(fp)
  8008f4:	e0bfff17 	ldw	r2,-4(fp)
  8008f8:	1080000b 	ldhu	r2,0(r2)
  8008fc:	10bfffcc 	andi	r2,r2,65535
  800900:	10800144 	addi	r2,r2,5
  800904:	18bfe216 	blt	r3,r2,800890 <_gp+0xffff4e40>
		for (j = ball->y; j < ball->y + BALL_H; ++j) {
			fb[j*VIDEO_W + i] = BACKGROUND_COLOR;
		}
	}
}
  800908:	0001883a 	nop
  80090c:	e037883a 	mov	sp,fp
  800910:	df000017 	ldw	fp,0(sp)
  800914:	dec00104 	addi	sp,sp,4
  800918:	f800283a 	ret

0080091c <draw_ball>:

// It's guaranteed that movement is valid
// coordinates change must be done after drawing
void draw_ball(alt_u8 *fb, Ball *ball, BALL_MOVEMENT move) {
  80091c:	defffa04 	addi	sp,sp,-24
  800920:	dfc00515 	stw	ra,20(sp)
  800924:	df000415 	stw	fp,16(sp)
  800928:	df000404 	addi	fp,sp,16
  80092c:	e13ffd15 	stw	r4,-12(fp)
  800930:	e17ffe15 	stw	r5,-8(fp)
  800934:	e1bfff15 	stw	r6,-4(fp)
	alt_u16 i, j;

	switch(move) {
  800938:	e0bfff17 	ldw	r2,-4(fp)
  80093c:	10800168 	cmpgeui	r2,r2,5
  800940:	10011f1e 	bne	r2,zero,800dc0 <draw_ball+0x4a4>
  800944:	e0bfff17 	ldw	r2,-4(fp)
  800948:	100690ba 	slli	r3,r2,2
  80094c:	00802034 	movhi	r2,128
  800950:	10825804 	addi	r2,r2,2400
  800954:	1885883a 	add	r2,r3,r2
  800958:	10800017 	ldw	r2,0(r2)
  80095c:	1000683a 	jmp	r2
  800960:	00800a40 	call	800a4 <__alt_mem_sdram_controller_0+0x800a4>
  800964:	00800b20 	cmpeqi	r2,zero,44
  800968:	00800c00 	call	800c0 <__alt_mem_sdram_controller_0+0x800c0>
  80096c:	00800ce0 	cmpeqi	r2,zero,51
  800970:	00800974 	movhi	r2,37
	case NO:
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800974:	e0bffe17 	ldw	r2,-8(fp)
  800978:	1080000b 	ldhu	r2,0(r2)
  80097c:	e0bffc0d 	sth	r2,-16(fp)
  800980:	00002806 	br	800a24 <draw_ball+0x108>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800984:	e0bffe17 	ldw	r2,-8(fp)
  800988:	1080008b 	ldhu	r2,2(r2)
  80098c:	e0bffc8d 	sth	r2,-14(fp)
  800990:	00001b06 	br	800a00 <draw_ball+0xe4>
				fb[j*VIDEO_W + i] = ball_sprite[j - ball->y][i - ball->x];
  800994:	e0bffc8b 	ldhu	r2,-14(fp)
  800998:	10c0a024 	muli	r3,r2,640
  80099c:	e0bffc0b 	ldhu	r2,-16(fp)
  8009a0:	1885883a 	add	r2,r3,r2
  8009a4:	1007883a 	mov	r3,r2
  8009a8:	e0bffd17 	ldw	r2,-12(fp)
  8009ac:	10c7883a 	add	r3,r2,r3
  8009b0:	e13ffc8b 	ldhu	r4,-14(fp)
  8009b4:	e0bffe17 	ldw	r2,-8(fp)
  8009b8:	1080008b 	ldhu	r2,2(r2)
  8009bc:	10bfffcc 	andi	r2,r2,65535
  8009c0:	208bc83a 	sub	r5,r4,r2
  8009c4:	e13ffc0b 	ldhu	r4,-16(fp)
  8009c8:	e0bffe17 	ldw	r2,-8(fp)
  8009cc:	1080000b 	ldhu	r2,0(r2)
  8009d0:	10bfffcc 	andi	r2,r2,65535
  8009d4:	2089c83a 	sub	r4,r4,r2
  8009d8:	00802034 	movhi	r2,128
  8009dc:	108dd404 	addi	r2,r2,14160
  8009e0:	29400164 	muli	r5,r5,5
  8009e4:	1145883a 	add	r2,r2,r5
  8009e8:	1105883a 	add	r2,r2,r4
  8009ec:	10800003 	ldbu	r2,0(r2)
  8009f0:	18800005 	stb	r2,0(r3)
	alt_u16 i, j;

	switch(move) {
	case NO:
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  8009f4:	e0bffc8b 	ldhu	r2,-14(fp)
  8009f8:	10800044 	addi	r2,r2,1
  8009fc:	e0bffc8d 	sth	r2,-14(fp)
  800a00:	e0fffc8b 	ldhu	r3,-14(fp)
  800a04:	e0bffe17 	ldw	r2,-8(fp)
  800a08:	1080008b 	ldhu	r2,2(r2)
  800a0c:	10bfffcc 	andi	r2,r2,65535
  800a10:	10800144 	addi	r2,r2,5
  800a14:	18bfdf16 	blt	r3,r2,800994 <_gp+0xffff4f44>
void draw_ball(alt_u8 *fb, Ball *ball, BALL_MOVEMENT move) {
	alt_u16 i, j;

	switch(move) {
	case NO:
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800a18:	e0bffc0b 	ldhu	r2,-16(fp)
  800a1c:	10800044 	addi	r2,r2,1
  800a20:	e0bffc0d 	sth	r2,-16(fp)
  800a24:	e0fffc0b 	ldhu	r3,-16(fp)
  800a28:	e0bffe17 	ldw	r2,-8(fp)
  800a2c:	1080000b 	ldhu	r2,0(r2)
  800a30:	10bfffcc 	andi	r2,r2,65535
  800a34:	10800144 	addi	r2,r2,5
  800a38:	18bfd216 	blt	r3,r2,800984 <_gp+0xffff4f34>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
				fb[j*VIDEO_W + i] = ball_sprite[j - ball->y][i - ball->x];
			}
		}
	break;
  800a3c:	0000e006 	br	800dc0 <draw_ball+0x4a4>

	case UR:
		delete_ball(fb, ball);
  800a40:	e17ffe17 	ldw	r5,-8(fp)
  800a44:	e13ffd17 	ldw	r4,-12(fp)
  800a48:	080086c0 	call	80086c <delete_ball>
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800a4c:	e0bffe17 	ldw	r2,-8(fp)
  800a50:	1080000b 	ldhu	r2,0(r2)
  800a54:	e0bffc0d 	sth	r2,-16(fp)
  800a58:	00002a06 	br	800b04 <draw_ball+0x1e8>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800a5c:	e0bffe17 	ldw	r2,-8(fp)
  800a60:	1080008b 	ldhu	r2,2(r2)
  800a64:	e0bffc8d 	sth	r2,-14(fp)
  800a68:	00001d06 	br	800ae0 <draw_ball+0x1c4>
				fb[(j-1)*VIDEO_W + (i+1)] = ball_sprite[j - ball->y][i - ball->x];
  800a6c:	e0bffc8b 	ldhu	r2,-14(fp)
  800a70:	10bfffc4 	addi	r2,r2,-1
  800a74:	10c0a024 	muli	r3,r2,640
  800a78:	e0bffc0b 	ldhu	r2,-16(fp)
  800a7c:	10800044 	addi	r2,r2,1
  800a80:	1885883a 	add	r2,r3,r2
  800a84:	1007883a 	mov	r3,r2
  800a88:	e0bffd17 	ldw	r2,-12(fp)
  800a8c:	10c7883a 	add	r3,r2,r3
  800a90:	e13ffc8b 	ldhu	r4,-14(fp)
  800a94:	e0bffe17 	ldw	r2,-8(fp)
  800a98:	1080008b 	ldhu	r2,2(r2)
  800a9c:	10bfffcc 	andi	r2,r2,65535
  800aa0:	208bc83a 	sub	r5,r4,r2
  800aa4:	e13ffc0b 	ldhu	r4,-16(fp)
  800aa8:	e0bffe17 	ldw	r2,-8(fp)
  800aac:	1080000b 	ldhu	r2,0(r2)
  800ab0:	10bfffcc 	andi	r2,r2,65535
  800ab4:	2089c83a 	sub	r4,r4,r2
  800ab8:	00802034 	movhi	r2,128
  800abc:	108dd404 	addi	r2,r2,14160
  800ac0:	29400164 	muli	r5,r5,5
  800ac4:	1145883a 	add	r2,r2,r5
  800ac8:	1105883a 	add	r2,r2,r4
  800acc:	10800003 	ldbu	r2,0(r2)
  800ad0:	18800005 	stb	r2,0(r3)
	break;

	case UR:
		delete_ball(fb, ball);
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800ad4:	e0bffc8b 	ldhu	r2,-14(fp)
  800ad8:	10800044 	addi	r2,r2,1
  800adc:	e0bffc8d 	sth	r2,-14(fp)
  800ae0:	e0fffc8b 	ldhu	r3,-14(fp)
  800ae4:	e0bffe17 	ldw	r2,-8(fp)
  800ae8:	1080008b 	ldhu	r2,2(r2)
  800aec:	10bfffcc 	andi	r2,r2,65535
  800af0:	10800144 	addi	r2,r2,5
  800af4:	18bfdd16 	blt	r3,r2,800a6c <_gp+0xffff501c>
		}
	break;

	case UR:
		delete_ball(fb, ball);
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800af8:	e0bffc0b 	ldhu	r2,-16(fp)
  800afc:	10800044 	addi	r2,r2,1
  800b00:	e0bffc0d 	sth	r2,-16(fp)
  800b04:	e0fffc0b 	ldhu	r3,-16(fp)
  800b08:	e0bffe17 	ldw	r2,-8(fp)
  800b0c:	1080000b 	ldhu	r2,0(r2)
  800b10:	10bfffcc 	andi	r2,r2,65535
  800b14:	10800144 	addi	r2,r2,5
  800b18:	18bfd016 	blt	r3,r2,800a5c <_gp+0xffff500c>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
				fb[(j-1)*VIDEO_W + (i+1)] = ball_sprite[j - ball->y][i - ball->x];
			}
		}
	break;
  800b1c:	0000a806 	br	800dc0 <draw_ball+0x4a4>

	case LR:
		delete_ball(fb, ball);
  800b20:	e17ffe17 	ldw	r5,-8(fp)
  800b24:	e13ffd17 	ldw	r4,-12(fp)
  800b28:	080086c0 	call	80086c <delete_ball>
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800b2c:	e0bffe17 	ldw	r2,-8(fp)
  800b30:	1080000b 	ldhu	r2,0(r2)
  800b34:	e0bffc0d 	sth	r2,-16(fp)
  800b38:	00002a06 	br	800be4 <draw_ball+0x2c8>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800b3c:	e0bffe17 	ldw	r2,-8(fp)
  800b40:	1080008b 	ldhu	r2,2(r2)
  800b44:	e0bffc8d 	sth	r2,-14(fp)
  800b48:	00001d06 	br	800bc0 <draw_ball+0x2a4>
				fb[(j+1)*VIDEO_W + (i+1)] = ball_sprite[j - ball->y][i - ball->x];
  800b4c:	e0bffc8b 	ldhu	r2,-14(fp)
  800b50:	10800044 	addi	r2,r2,1
  800b54:	10c0a024 	muli	r3,r2,640
  800b58:	e0bffc0b 	ldhu	r2,-16(fp)
  800b5c:	10800044 	addi	r2,r2,1
  800b60:	1885883a 	add	r2,r3,r2
  800b64:	1007883a 	mov	r3,r2
  800b68:	e0bffd17 	ldw	r2,-12(fp)
  800b6c:	10c7883a 	add	r3,r2,r3
  800b70:	e13ffc8b 	ldhu	r4,-14(fp)
  800b74:	e0bffe17 	ldw	r2,-8(fp)
  800b78:	1080008b 	ldhu	r2,2(r2)
  800b7c:	10bfffcc 	andi	r2,r2,65535
  800b80:	208bc83a 	sub	r5,r4,r2
  800b84:	e13ffc0b 	ldhu	r4,-16(fp)
  800b88:	e0bffe17 	ldw	r2,-8(fp)
  800b8c:	1080000b 	ldhu	r2,0(r2)
  800b90:	10bfffcc 	andi	r2,r2,65535
  800b94:	2089c83a 	sub	r4,r4,r2
  800b98:	00802034 	movhi	r2,128
  800b9c:	108dd404 	addi	r2,r2,14160
  800ba0:	29400164 	muli	r5,r5,5
  800ba4:	1145883a 	add	r2,r2,r5
  800ba8:	1105883a 	add	r2,r2,r4
  800bac:	10800003 	ldbu	r2,0(r2)
  800bb0:	18800005 	stb	r2,0(r3)
	break;

	case LR:
		delete_ball(fb, ball);
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800bb4:	e0bffc8b 	ldhu	r2,-14(fp)
  800bb8:	10800044 	addi	r2,r2,1
  800bbc:	e0bffc8d 	sth	r2,-14(fp)
  800bc0:	e0fffc8b 	ldhu	r3,-14(fp)
  800bc4:	e0bffe17 	ldw	r2,-8(fp)
  800bc8:	1080008b 	ldhu	r2,2(r2)
  800bcc:	10bfffcc 	andi	r2,r2,65535
  800bd0:	10800144 	addi	r2,r2,5
  800bd4:	18bfdd16 	blt	r3,r2,800b4c <_gp+0xffff50fc>
		}
	break;

	case LR:
		delete_ball(fb, ball);
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800bd8:	e0bffc0b 	ldhu	r2,-16(fp)
  800bdc:	10800044 	addi	r2,r2,1
  800be0:	e0bffc0d 	sth	r2,-16(fp)
  800be4:	e0fffc0b 	ldhu	r3,-16(fp)
  800be8:	e0bffe17 	ldw	r2,-8(fp)
  800bec:	1080000b 	ldhu	r2,0(r2)
  800bf0:	10bfffcc 	andi	r2,r2,65535
  800bf4:	10800144 	addi	r2,r2,5
  800bf8:	18bfd016 	blt	r3,r2,800b3c <_gp+0xffff50ec>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
				fb[(j+1)*VIDEO_W + (i+1)] = ball_sprite[j - ball->y][i - ball->x];
			}
		}
	break;
  800bfc:	00007006 	br	800dc0 <draw_ball+0x4a4>

	case LL:
		delete_ball(fb, ball);
  800c00:	e17ffe17 	ldw	r5,-8(fp)
  800c04:	e13ffd17 	ldw	r4,-12(fp)
  800c08:	080086c0 	call	80086c <delete_ball>
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800c0c:	e0bffe17 	ldw	r2,-8(fp)
  800c10:	1080000b 	ldhu	r2,0(r2)
  800c14:	e0bffc0d 	sth	r2,-16(fp)
  800c18:	00002a06 	br	800cc4 <draw_ball+0x3a8>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800c1c:	e0bffe17 	ldw	r2,-8(fp)
  800c20:	1080008b 	ldhu	r2,2(r2)
  800c24:	e0bffc8d 	sth	r2,-14(fp)
  800c28:	00001d06 	br	800ca0 <draw_ball+0x384>
				fb[(j+1)*VIDEO_W + (i-1)] = ball_sprite[j - ball->y][i - ball->x];
  800c2c:	e0bffc8b 	ldhu	r2,-14(fp)
  800c30:	10800044 	addi	r2,r2,1
  800c34:	10c0a024 	muli	r3,r2,640
  800c38:	e0bffc0b 	ldhu	r2,-16(fp)
  800c3c:	10bfffc4 	addi	r2,r2,-1
  800c40:	1885883a 	add	r2,r3,r2
  800c44:	1007883a 	mov	r3,r2
  800c48:	e0bffd17 	ldw	r2,-12(fp)
  800c4c:	10c7883a 	add	r3,r2,r3
  800c50:	e13ffc8b 	ldhu	r4,-14(fp)
  800c54:	e0bffe17 	ldw	r2,-8(fp)
  800c58:	1080008b 	ldhu	r2,2(r2)
  800c5c:	10bfffcc 	andi	r2,r2,65535
  800c60:	208bc83a 	sub	r5,r4,r2
  800c64:	e13ffc0b 	ldhu	r4,-16(fp)
  800c68:	e0bffe17 	ldw	r2,-8(fp)
  800c6c:	1080000b 	ldhu	r2,0(r2)
  800c70:	10bfffcc 	andi	r2,r2,65535
  800c74:	2089c83a 	sub	r4,r4,r2
  800c78:	00802034 	movhi	r2,128
  800c7c:	108dd404 	addi	r2,r2,14160
  800c80:	29400164 	muli	r5,r5,5
  800c84:	1145883a 	add	r2,r2,r5
  800c88:	1105883a 	add	r2,r2,r4
  800c8c:	10800003 	ldbu	r2,0(r2)
  800c90:	18800005 	stb	r2,0(r3)
	break;

	case LL:
		delete_ball(fb, ball);
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800c94:	e0bffc8b 	ldhu	r2,-14(fp)
  800c98:	10800044 	addi	r2,r2,1
  800c9c:	e0bffc8d 	sth	r2,-14(fp)
  800ca0:	e0fffc8b 	ldhu	r3,-14(fp)
  800ca4:	e0bffe17 	ldw	r2,-8(fp)
  800ca8:	1080008b 	ldhu	r2,2(r2)
  800cac:	10bfffcc 	andi	r2,r2,65535
  800cb0:	10800144 	addi	r2,r2,5
  800cb4:	18bfdd16 	blt	r3,r2,800c2c <_gp+0xffff51dc>
		}
	break;

	case LL:
		delete_ball(fb, ball);
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800cb8:	e0bffc0b 	ldhu	r2,-16(fp)
  800cbc:	10800044 	addi	r2,r2,1
  800cc0:	e0bffc0d 	sth	r2,-16(fp)
  800cc4:	e0fffc0b 	ldhu	r3,-16(fp)
  800cc8:	e0bffe17 	ldw	r2,-8(fp)
  800ccc:	1080000b 	ldhu	r2,0(r2)
  800cd0:	10bfffcc 	andi	r2,r2,65535
  800cd4:	10800144 	addi	r2,r2,5
  800cd8:	18bfd016 	blt	r3,r2,800c1c <_gp+0xffff51cc>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
				fb[(j+1)*VIDEO_W + (i-1)] = ball_sprite[j - ball->y][i - ball->x];
			}
		}
	break;
  800cdc:	00003806 	br	800dc0 <draw_ball+0x4a4>

	case UL:
		delete_ball(fb, ball);
  800ce0:	e17ffe17 	ldw	r5,-8(fp)
  800ce4:	e13ffd17 	ldw	r4,-12(fp)
  800ce8:	080086c0 	call	80086c <delete_ball>
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800cec:	e0bffe17 	ldw	r2,-8(fp)
  800cf0:	1080000b 	ldhu	r2,0(r2)
  800cf4:	e0bffc0d 	sth	r2,-16(fp)
  800cf8:	00002a06 	br	800da4 <draw_ball+0x488>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800cfc:	e0bffe17 	ldw	r2,-8(fp)
  800d00:	1080008b 	ldhu	r2,2(r2)
  800d04:	e0bffc8d 	sth	r2,-14(fp)
  800d08:	00001d06 	br	800d80 <draw_ball+0x464>
				fb[(j-1)*VIDEO_W + (i-1)] = ball_sprite[j - ball->y][i - ball->x];
  800d0c:	e0bffc8b 	ldhu	r2,-14(fp)
  800d10:	10bfffc4 	addi	r2,r2,-1
  800d14:	10c0a024 	muli	r3,r2,640
  800d18:	e0bffc0b 	ldhu	r2,-16(fp)
  800d1c:	10bfffc4 	addi	r2,r2,-1
  800d20:	1885883a 	add	r2,r3,r2
  800d24:	1007883a 	mov	r3,r2
  800d28:	e0bffd17 	ldw	r2,-12(fp)
  800d2c:	10c7883a 	add	r3,r2,r3
  800d30:	e13ffc8b 	ldhu	r4,-14(fp)
  800d34:	e0bffe17 	ldw	r2,-8(fp)
  800d38:	1080008b 	ldhu	r2,2(r2)
  800d3c:	10bfffcc 	andi	r2,r2,65535
  800d40:	208bc83a 	sub	r5,r4,r2
  800d44:	e13ffc0b 	ldhu	r4,-16(fp)
  800d48:	e0bffe17 	ldw	r2,-8(fp)
  800d4c:	1080000b 	ldhu	r2,0(r2)
  800d50:	10bfffcc 	andi	r2,r2,65535
  800d54:	2089c83a 	sub	r4,r4,r2
  800d58:	00802034 	movhi	r2,128
  800d5c:	108dd404 	addi	r2,r2,14160
  800d60:	29400164 	muli	r5,r5,5
  800d64:	1145883a 	add	r2,r2,r5
  800d68:	1105883a 	add	r2,r2,r4
  800d6c:	10800003 	ldbu	r2,0(r2)
  800d70:	18800005 	stb	r2,0(r3)
	break;

	case UL:
		delete_ball(fb, ball);
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
  800d74:	e0bffc8b 	ldhu	r2,-14(fp)
  800d78:	10800044 	addi	r2,r2,1
  800d7c:	e0bffc8d 	sth	r2,-14(fp)
  800d80:	e0fffc8b 	ldhu	r3,-14(fp)
  800d84:	e0bffe17 	ldw	r2,-8(fp)
  800d88:	1080008b 	ldhu	r2,2(r2)
  800d8c:	10bfffcc 	andi	r2,r2,65535
  800d90:	10800144 	addi	r2,r2,5
  800d94:	18bfdd16 	blt	r3,r2,800d0c <_gp+0xffff52bc>
		}
	break;

	case UL:
		delete_ball(fb, ball);
		for (i = ball->x; i < ball->x + BALL_W; ++i) { // WHY ball->w and ball->h don't work?
  800d98:	e0bffc0b 	ldhu	r2,-16(fp)
  800d9c:	10800044 	addi	r2,r2,1
  800da0:	e0bffc0d 	sth	r2,-16(fp)
  800da4:	e0fffc0b 	ldhu	r3,-16(fp)
  800da8:	e0bffe17 	ldw	r2,-8(fp)
  800dac:	1080000b 	ldhu	r2,0(r2)
  800db0:	10bfffcc 	andi	r2,r2,65535
  800db4:	10800144 	addi	r2,r2,5
  800db8:	18bfd016 	blt	r3,r2,800cfc <_gp+0xffff52ac>
			for (j = ball->y; j < ball->y + BALL_H; ++j) {
				fb[(j-1)*VIDEO_W + (i-1)] = ball_sprite[j - ball->y][i - ball->x];
			}
		}
	break;
  800dbc:	0001883a 	nop
	}
}
  800dc0:	0001883a 	nop
  800dc4:	e037883a 	mov	sp,fp
  800dc8:	dfc00117 	ldw	ra,4(sp)
  800dcc:	df000017 	ldw	fp,0(sp)
  800dd0:	dec00204 	addi	sp,sp,8
  800dd4:	f800283a 	ret

00800dd8 <display_points>:
//


typedef enum PLAYER {FIRST, SECOND} PLAYER;

void display_points(alt_u8 *fb, PLAYER player, alt_u8 points, char *disp_points[6]) {
  800dd8:	defff904 	addi	sp,sp,-28
  800ddc:	dfc00615 	stw	ra,24(sp)
  800de0:	df000515 	stw	fp,20(sp)
  800de4:	df000504 	addi	fp,sp,20
  800de8:	e13ffc15 	stw	r4,-16(fp)
  800dec:	e17ffd15 	stw	r5,-12(fp)
  800df0:	3005883a 	mov	r2,r6
  800df4:	e1ffff15 	stw	r7,-4(fp)
  800df8:	e0bffe05 	stb	r2,-8(fp)
	alt_u16 i, j;
	switch (player) {
  800dfc:	e0bffd17 	ldw	r2,-12(fp)
  800e00:	10000326 	beq	r2,zero,800e10 <display_points+0x38>
  800e04:	10800060 	cmpeqi	r2,r2,1
  800e08:	1000291e 	bne	r2,zero,800eb0 <display_points+0xd8>
		}

		putstr(VIDEO_W - 80, TEXT_PLACE_H, disp_points[points], GREEN);
	break;
	}
}
  800e0c:	00005006 	br	800f50 <display_points+0x178>

void display_points(alt_u8 *fb, PLAYER player, alt_u8 points, char *disp_points[6]) {
	alt_u16 i, j;
	switch (player) {
	case FIRST:
		for (i = 80; i < 150; ++i) { // WHY ball->w and ball->h don't work?
  800e10:	00801404 	movi	r2,80
  800e14:	e0bffb0d 	sth	r2,-20(fp)
  800e18:	00001506 	br	800e70 <display_points+0x98>
			for (j = FIELD_LOWER_BORDER+1; j < VIDEO_H; ++j) {
  800e1c:	00807484 	movi	r2,466
  800e20:	e0bffb8d 	sth	r2,-18(fp)
  800e24:	00000c06 	br	800e58 <display_points+0x80>
				fb[j*VIDEO_W + i] = BORDER_COLOR;
  800e28:	e0bffb8b 	ldhu	r2,-18(fp)
  800e2c:	10c0a024 	muli	r3,r2,640
  800e30:	e0bffb0b 	ldhu	r2,-20(fp)
  800e34:	1885883a 	add	r2,r3,r2
  800e38:	1007883a 	mov	r3,r2
  800e3c:	e0bffc17 	ldw	r2,-16(fp)
  800e40:	10c5883a 	add	r2,r2,r3
  800e44:	00ffffc4 	movi	r3,-1
  800e48:	10c00005 	stb	r3,0(r2)
void display_points(alt_u8 *fb, PLAYER player, alt_u8 points, char *disp_points[6]) {
	alt_u16 i, j;
	switch (player) {
	case FIRST:
		for (i = 80; i < 150; ++i) { // WHY ball->w and ball->h don't work?
			for (j = FIELD_LOWER_BORDER+1; j < VIDEO_H; ++j) {
  800e4c:	e0bffb8b 	ldhu	r2,-18(fp)
  800e50:	10800044 	addi	r2,r2,1
  800e54:	e0bffb8d 	sth	r2,-18(fp)
  800e58:	e0bffb8b 	ldhu	r2,-18(fp)
  800e5c:	10807830 	cmpltui	r2,r2,480
  800e60:	103ff11e 	bne	r2,zero,800e28 <_gp+0xffff53d8>

void display_points(alt_u8 *fb, PLAYER player, alt_u8 points, char *disp_points[6]) {
	alt_u16 i, j;
	switch (player) {
	case FIRST:
		for (i = 80; i < 150; ++i) { // WHY ball->w and ball->h don't work?
  800e64:	e0bffb0b 	ldhu	r2,-20(fp)
  800e68:	10800044 	addi	r2,r2,1
  800e6c:	e0bffb0d 	sth	r2,-20(fp)
  800e70:	e0bffb0b 	ldhu	r2,-20(fp)
  800e74:	108025b0 	cmpltui	r2,r2,150
  800e78:	103fe81e 	bne	r2,zero,800e1c <_gp+0xffff53cc>
			for (j = FIELD_LOWER_BORDER+1; j < VIDEO_H; ++j) {
				fb[j*VIDEO_W + i] = BORDER_COLOR;
			}
		}

		putstr(50, TEXT_PLACE_H, disp_points[points], RED);
  800e7c:	e0bffe03 	ldbu	r2,-8(fp)
  800e80:	1085883a 	add	r2,r2,r2
  800e84:	1085883a 	add	r2,r2,r2
  800e88:	1007883a 	mov	r3,r2
  800e8c:	e0bfff17 	ldw	r2,-4(fp)
  800e90:	10c5883a 	add	r2,r2,r3
  800e94:	10800017 	ldw	r2,0(r2)
  800e98:	01c03804 	movi	r7,224
  800e9c:	100d883a 	mov	r6,r2
  800ea0:	01407584 	movi	r5,470
  800ea4:	01000c84 	movi	r4,50
  800ea8:	080052c0 	call	80052c <putstr>
	break;
  800eac:	00002806 	br	800f50 <display_points+0x178>

	case SECOND:
		for (i = VIDEO_W - 80; i < VIDEO_W; ++i) { // WHY ball->w and ball->h don't work?
  800eb0:	00808c04 	movi	r2,560
  800eb4:	e0bffb0d 	sth	r2,-20(fp)
  800eb8:	00001506 	br	800f10 <display_points+0x138>
			for (j = FIELD_LOWER_BORDER+1; j < VIDEO_H; ++j) {
  800ebc:	00807484 	movi	r2,466
  800ec0:	e0bffb8d 	sth	r2,-18(fp)
  800ec4:	00000c06 	br	800ef8 <display_points+0x120>
				fb[j*VIDEO_W + i] = BORDER_COLOR;
  800ec8:	e0bffb8b 	ldhu	r2,-18(fp)
  800ecc:	10c0a024 	muli	r3,r2,640
  800ed0:	e0bffb0b 	ldhu	r2,-20(fp)
  800ed4:	1885883a 	add	r2,r3,r2
  800ed8:	1007883a 	mov	r3,r2
  800edc:	e0bffc17 	ldw	r2,-16(fp)
  800ee0:	10c5883a 	add	r2,r2,r3
  800ee4:	00ffffc4 	movi	r3,-1
  800ee8:	10c00005 	stb	r3,0(r2)
		putstr(50, TEXT_PLACE_H, disp_points[points], RED);
	break;

	case SECOND:
		for (i = VIDEO_W - 80; i < VIDEO_W; ++i) { // WHY ball->w and ball->h don't work?
			for (j = FIELD_LOWER_BORDER+1; j < VIDEO_H; ++j) {
  800eec:	e0bffb8b 	ldhu	r2,-18(fp)
  800ef0:	10800044 	addi	r2,r2,1
  800ef4:	e0bffb8d 	sth	r2,-18(fp)
  800ef8:	e0bffb8b 	ldhu	r2,-18(fp)
  800efc:	10807830 	cmpltui	r2,r2,480
  800f00:	103ff11e 	bne	r2,zero,800ec8 <_gp+0xffff5478>

		putstr(50, TEXT_PLACE_H, disp_points[points], RED);
	break;

	case SECOND:
		for (i = VIDEO_W - 80; i < VIDEO_W; ++i) { // WHY ball->w and ball->h don't work?
  800f04:	e0bffb0b 	ldhu	r2,-20(fp)
  800f08:	10800044 	addi	r2,r2,1
  800f0c:	e0bffb0d 	sth	r2,-20(fp)
  800f10:	e0bffb0b 	ldhu	r2,-20(fp)
  800f14:	1080a030 	cmpltui	r2,r2,640
  800f18:	103fe81e 	bne	r2,zero,800ebc <_gp+0xffff546c>
			for (j = FIELD_LOWER_BORDER+1; j < VIDEO_H; ++j) {
				fb[j*VIDEO_W + i] = BORDER_COLOR;
			}
		}

		putstr(VIDEO_W - 80, TEXT_PLACE_H, disp_points[points], GREEN);
  800f1c:	e0bffe03 	ldbu	r2,-8(fp)
  800f20:	1085883a 	add	r2,r2,r2
  800f24:	1085883a 	add	r2,r2,r2
  800f28:	1007883a 	mov	r3,r2
  800f2c:	e0bfff17 	ldw	r2,-4(fp)
  800f30:	10c5883a 	add	r2,r2,r3
  800f34:	10800017 	ldw	r2,0(r2)
  800f38:	01c00704 	movi	r7,28
  800f3c:	100d883a 	mov	r6,r2
  800f40:	01407584 	movi	r5,470
  800f44:	01008c04 	movi	r4,560
  800f48:	080052c0 	call	80052c <putstr>
	break;
  800f4c:	0001883a 	nop
	}
}
  800f50:	0001883a 	nop
  800f54:	e037883a 	mov	sp,fp
  800f58:	dfc00117 	ldw	ra,4(sp)
  800f5c:	df000017 	ldw	fp,0(sp)
  800f60:	dec00204 	addi	sp,sp,8
  800f64:	f800283a 	ret

00800f68 <display_final_message>:


void display_final_message(alt_u8 *fb, alt_u8 points_first, alt_u8 points_second) {
  800f68:	defffb04 	addi	sp,sp,-20
  800f6c:	dfc00415 	stw	ra,16(sp)
  800f70:	df000315 	stw	fp,12(sp)
  800f74:	df000304 	addi	fp,sp,12
  800f78:	e13ffd15 	stw	r4,-12(fp)
  800f7c:	2807883a 	mov	r3,r5
  800f80:	3005883a 	mov	r2,r6
  800f84:	e0fffe05 	stb	r3,-8(fp)
  800f88:	e0bfff05 	stb	r2,-4(fp)
	if (points_first == MAX_GOALS) {
  800f8c:	e0bffe03 	ldbu	r2,-8(fp)
  800f90:	108000d8 	cmpnei	r2,r2,3
  800f94:	1000071e 	bne	r2,zero,800fb4 <display_final_message+0x4c>
		putstr(VIDEO_CENTRE_W-48, VIDEO_CENTRE_H, "xXx RED WINS xXx", RED);
  800f98:	01c03804 	movi	r7,224
  800f9c:	01802034 	movhi	r6,128
  800fa0:	318da204 	addi	r6,r6,13960
  800fa4:	01403c04 	movi	r5,240
  800fa8:	01004404 	movi	r4,272
  800fac:	080052c0 	call	80052c <putstr>
	} else {
		putstr(VIDEO_CENTRE_W-54, VIDEO_CENTRE_H, "xXx GREEN WINS xXx", GREEN);
	}
}
  800fb0:	00000606 	br	800fcc <display_final_message+0x64>

void display_final_message(alt_u8 *fb, alt_u8 points_first, alt_u8 points_second) {
	if (points_first == MAX_GOALS) {
		putstr(VIDEO_CENTRE_W-48, VIDEO_CENTRE_H, "xXx RED WINS xXx", RED);
	} else {
		putstr(VIDEO_CENTRE_W-54, VIDEO_CENTRE_H, "xXx GREEN WINS xXx", GREEN);
  800fb4:	01c00704 	movi	r7,28
  800fb8:	01802034 	movhi	r6,128
  800fbc:	318da704 	addi	r6,r6,13980
  800fc0:	01403c04 	movi	r5,240
  800fc4:	01004284 	movi	r4,266
  800fc8:	080052c0 	call	80052c <putstr>
	}
}
  800fcc:	0001883a 	nop
  800fd0:	e037883a 	mov	sp,fp
  800fd4:	dfc00117 	ldw	ra,4(sp)
  800fd8:	df000017 	ldw	fp,0(sp)
  800fdc:	dec00204 	addi	sp,sp,8
  800fe0:	f800283a 	ret

00800fe4 <random_int>:


int random_int(alt_u16 lower, alt_u16 upper) {
  800fe4:	defffc04 	addi	sp,sp,-16
  800fe8:	dfc00315 	stw	ra,12(sp)
  800fec:	df000215 	stw	fp,8(sp)
  800ff0:	df000204 	addi	fp,sp,8
  800ff4:	2007883a 	mov	r3,r4
  800ff8:	2805883a 	mov	r2,r5
  800ffc:	e0fffe0d 	sth	r3,-8(fp)
  801000:	e0bfff0d 	sth	r2,-4(fp)
	return rand() % (upper - lower) + lower;
  801004:	0801ae40 	call	801ae4 <rand>
  801008:	1009883a 	mov	r4,r2
  80100c:	e0ffff0b 	ldhu	r3,-4(fp)
  801010:	e0bffe0b 	ldhu	r2,-8(fp)
  801014:	1885c83a 	sub	r2,r3,r2
  801018:	100b883a 	mov	r5,r2
  80101c:	08019a00 	call	8019a0 <__modsi3>
  801020:	1007883a 	mov	r3,r2
  801024:	e0bffe0b 	ldhu	r2,-8(fp)
  801028:	1885883a 	add	r2,r3,r2
}
  80102c:	e037883a 	mov	sp,fp
  801030:	dfc00117 	ldw	ra,4(sp)
  801034:	df000017 	ldw	fp,0(sp)
  801038:	dec00204 	addi	sp,sp,8
  80103c:	f800283a 	ret

00801040 <main>:


int main() {	// DMA
  801040:	deffe904 	addi	sp,sp,-92
  801044:	dfc01615 	stw	ra,88(sp)
  801048:	df001515 	stw	fp,84(sp)
  80104c:	df001504 	addi	fp,sp,84
	dma =  alt_avalon_sgdma_open("/dev/sgdma_0");
  801050:	01002034 	movhi	r4,128
  801054:	210dac04 	addi	r4,r4,14000
  801058:	08023e80 	call	8023e8 <alt_avalon_sgdma_open>
  80105c:	d0a0d715 	stw	r2,-31908(gp)
	// KEYS
	keys =  alt_up_parallel_port_open_dev("/dev/parallel_port_0");
  801060:	01002034 	movhi	r4,128
  801064:	210db004 	addi	r4,r4,14016
  801068:	0802ac40 	call	802ac4 <alt_up_parallel_port_open_dev>
  80106c:	d0a0da15 	stw	r2,-31896(gp)
	fb = SDRAM_CONTROLLER_0_BASE;
  801070:	d020d815 	stw	zero,-31904(gp)
	frame = 0;
  801074:	d020d905 	stb	zero,-31900(gp)
	alt_u8 tframe=0;
  801078:	e03fef05 	stb	zero,-68(fp)
	alt_u32 i, j;
	alt_u32 l;
	alt_u32 buttons;
	i = 0;
  80107c:	e03ff015 	stw	zero,-64(fp)
	j = 0;
  801080:	e03ff115 	stw	zero,-60(fp)


	while (j<VIDEO_SIZE){
  801084:	00002a06 	br	801130 <main+0xf0>
		l = VIDEO_SIZE - j > 0xFFFF ? 0xFFFF : VIDEO_SIZE - j; // 16-bit counter, packet length is limited
  801088:	00800174 	movhi	r2,5
  80108c:	10ac0044 	addi	r2,r2,-20479
  801090:	e0fff117 	ldw	r3,-60(fp)
  801094:	10c5c83a 	sub	r2,r2,r3
  801098:	00ffffd4 	movui	r3,65535
  80109c:	1880012e 	bgeu	r3,r2,8010a4 <main+0x64>
  8010a0:	00bfffd4 	movui	r2,65535
  8010a4:	e0bff315 	stw	r2,-52(fp)
		alt_avalon_sgdma_construct_mem_to_stream_desc(&ds[i], &ds[i+1], (alt_u32*)(fb+j), l, 0, i==0 ? 1: 0, i == 0 ? 1 : 0, 0); // descriptors, seamless transmission even with limited length
  8010a8:	e0bff017 	ldw	r2,-64(fp)
  8010ac:	1006917a 	slli	r3,r2,5
  8010b0:	00802034 	movhi	r2,128
  8010b4:	108f7704 	addi	r2,r2,15836
  8010b8:	1889883a 	add	r4,r3,r2
  8010bc:	e0bff017 	ldw	r2,-64(fp)
  8010c0:	10800044 	addi	r2,r2,1
  8010c4:	1006917a 	slli	r3,r2,5
  8010c8:	00802034 	movhi	r2,128
  8010cc:	108f7704 	addi	r2,r2,15836
  8010d0:	188b883a 	add	r5,r3,r2
  8010d4:	d0e0d817 	ldw	r3,-31904(gp)
  8010d8:	e0bff117 	ldw	r2,-60(fp)
  8010dc:	188d883a 	add	r6,r3,r2
  8010e0:	e0bff317 	ldw	r2,-52(fp)
  8010e4:	11ffffcc 	andi	r7,r2,65535
  8010e8:	e0bff017 	ldw	r2,-64(fp)
  8010ec:	1005003a 	cmpeq	r2,r2,zero
  8010f0:	10803fcc 	andi	r2,r2,255
  8010f4:	e0fff017 	ldw	r3,-64(fp)
  8010f8:	1807003a 	cmpeq	r3,r3,zero
  8010fc:	18c03fcc 	andi	r3,r3,255
  801100:	d8000315 	stw	zero,12(sp)
  801104:	d8c00215 	stw	r3,8(sp)
  801108:	d8800115 	stw	r2,4(sp)
  80110c:	d8000015 	stw	zero,0(sp)
  801110:	08021700 	call	802170 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		i++;
  801114:	e0bff017 	ldw	r2,-64(fp)
  801118:	10800044 	addi	r2,r2,1
  80111c:	e0bff015 	stw	r2,-64(fp)
		j+=l;
  801120:	e0fff117 	ldw	r3,-60(fp)
  801124:	e0bff317 	ldw	r2,-52(fp)
  801128:	1885883a 	add	r2,r3,r2
  80112c:	e0bff115 	stw	r2,-60(fp)
	alt_u32 buttons;
	i = 0;
	j = 0;


	while (j<VIDEO_SIZE){
  801130:	e0fff117 	ldw	r3,-60(fp)
  801134:	00800174 	movhi	r2,5
  801138:	10ac0004 	addi	r2,r2,-20480
  80113c:	10ffd22e 	bgeu	r2,r3,801088 <_gp+0xffff5638>
		l = VIDEO_SIZE - j > 0xFFFF ? 0xFFFF : VIDEO_SIZE - j; // 16-bit counter, packet length is limited
		alt_avalon_sgdma_construct_mem_to_stream_desc(&ds[i], &ds[i+1], (alt_u32*)(fb+j), l, 0, i==0 ? 1: 0, i == 0 ? 1 : 0, 0); // descriptors, seamless transmission even with limited length
		i++;
		j+=l;
	}
	i--;
  801140:	e0bff017 	ldw	r2,-64(fp)
  801144:	10bfffc4 	addi	r2,r2,-1
  801148:	e0bff015 	stw	r2,-64(fp)
	ds[i].next = (alt_u32*)&ds[0]; // back to zeroth descriptors
  80114c:	00802034 	movhi	r2,128
  801150:	108f7704 	addi	r2,r2,15836
  801154:	e0fff017 	ldw	r3,-64(fp)
  801158:	1806917a 	slli	r3,r3,5
  80115c:	10c5883a 	add	r2,r2,r3
  801160:	10800404 	addi	r2,r2,16
  801164:	00c02034 	movhi	r3,128
  801168:	18cf7704 	addi	r3,r3,15836
  80116c:	19803fcc 	andi	r6,r3,255
  801170:	11000003 	ldbu	r4,0(r2)
  801174:	2008703a 	and	r4,r4,zero
  801178:	200b883a 	mov	r5,r4
  80117c:	3009883a 	mov	r4,r6
  801180:	2908b03a 	or	r4,r5,r4
  801184:	11000005 	stb	r4,0(r2)
  801188:	1808d23a 	srli	r4,r3,8
  80118c:	21803fcc 	andi	r6,r4,255
  801190:	11000043 	ldbu	r4,1(r2)
  801194:	2008703a 	and	r4,r4,zero
  801198:	200b883a 	mov	r5,r4
  80119c:	3009883a 	mov	r4,r6
  8011a0:	2908b03a 	or	r4,r5,r4
  8011a4:	11000045 	stb	r4,1(r2)
  8011a8:	1808d43a 	srli	r4,r3,16
  8011ac:	21803fcc 	andi	r6,r4,255
  8011b0:	11000083 	ldbu	r4,2(r2)
  8011b4:	2008703a 	and	r4,r4,zero
  8011b8:	200b883a 	mov	r5,r4
  8011bc:	3009883a 	mov	r4,r6
  8011c0:	2908b03a 	or	r4,r5,r4
  8011c4:	11000085 	stb	r4,2(r2)
  8011c8:	180ad63a 	srli	r5,r3,24
  8011cc:	10c000c3 	ldbu	r3,3(r2)
  8011d0:	1806703a 	and	r3,r3,zero
  8011d4:	1809883a 	mov	r4,r3
  8011d8:	2807883a 	mov	r3,r5
  8011dc:	20c6b03a 	or	r3,r4,r3
  8011e0:	10c000c5 	stb	r3,3(r2)
	dma_chain_len = i+1;
  8011e4:	e0bff017 	ldw	r2,-64(fp)
  8011e8:	10800044 	addi	r2,r2,1
  8011ec:	d0a0d605 	stb	r2,-31912(gp)
	// dma interruption handler
 	alt_avalon_sgdma_register_callback(dma, dma_callback, ALTERA_AVALON_SGDMA_CONTROL_IE_DESC_COMPLETED_MSK | ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK, NULL);
  8011f0:	d0a0d717 	ldw	r2,-31908(gp)
  8011f4:	000f883a 	mov	r7,zero
  8011f8:	01800504 	movi	r6,20
  8011fc:	01402034 	movhi	r5,128
  801200:	2940a004 	addi	r5,r5,640
  801204:	1009883a 	mov	r4,r2
  801208:	080227c0 	call	80227c <alt_avalon_sgdma_register_callback>

	vga_pattern();
  80120c:	080037c0 	call	80037c <vga_pattern>


	// GAME //

	putstr(VIDEO_CENTRE_W-80, TEXT_PLACE_H,"Ping-Pong Complete Edition (c)", BLUE);
  801210:	01c000c4 	movi	r7,3
  801214:	01802034 	movhi	r6,128
  801218:	318db604 	addi	r6,r6,14040
  80121c:	01407584 	movi	r5,470
  801220:	01003c04 	movi	r4,240
  801224:	080052c0 	call	80052c <putstr>

	char *disp_points[6];
	disp_points[0] = "zero";
  801228:	00802034 	movhi	r2,128
  80122c:	108dbe04 	addi	r2,r2,14072
  801230:	e0bff515 	stw	r2,-44(fp)
	disp_points[1] = "X";
  801234:	00802034 	movhi	r2,128
  801238:	108dc004 	addi	r2,r2,14080
  80123c:	e0bff615 	stw	r2,-40(fp)
	disp_points[2] = "XX";
  801240:	00802034 	movhi	r2,128
  801244:	108dc104 	addi	r2,r2,14084
  801248:	e0bff715 	stw	r2,-36(fp)
	disp_points[3] = "XXX";
  80124c:	00802034 	movhi	r2,128
  801250:	108dc204 	addi	r2,r2,14088
  801254:	e0bff815 	stw	r2,-32(fp)
	disp_points[4] = "XXXX";
  801258:	00802034 	movhi	r2,128
  80125c:	108dc304 	addi	r2,r2,14092
  801260:	e0bff915 	stw	r2,-28(fp)
	disp_points[5] = "XXXXX";
  801264:	00802034 	movhi	r2,128
  801268:	108dc504 	addi	r2,r2,14100
  80126c:	e0bffa15 	stw	r2,-24(fp)

	putstr(80, TEXT_PLACE_H, disp_points[0], RED);
  801270:	e0bff517 	ldw	r2,-44(fp)
  801274:	01c03804 	movi	r7,224
  801278:	100d883a 	mov	r6,r2
  80127c:	01407584 	movi	r5,470
  801280:	01001404 	movi	r4,80
  801284:	080052c0 	call	80052c <putstr>
	putstr(VIDEO_W - 80, TEXT_PLACE_H, disp_points[0], GREEN);
  801288:	e0bff517 	ldw	r2,-44(fp)
  80128c:	01c00704 	movi	r7,28
  801290:	100d883a 	mov	r6,r2
  801294:	01407584 	movi	r5,470
  801298:	01008c04 	movi	r4,560
  80129c:	080052c0 	call	80052c <putstr>

	// Players init
	Player first = {0+PLAYER_FIRST_SHIFT, PLAYER_INIT_H, RED};
  8012a0:	00800044 	movi	r2,1
  8012a4:	e0bffb0d 	sth	r2,-20(fp)
  8012a8:	00802f84 	movi	r2,190
  8012ac:	e0bffb8d 	sth	r2,-18(fp)
  8012b0:	00bff804 	movi	r2,-32
  8012b4:	e0bffc05 	stb	r2,-16(fp)
	Player second = {VIDEO_W-PLAYER_SECOND_SHIFT, PLAYER_INIT_H, GREEN};
  8012b8:	00809ec4 	movi	r2,635
  8012bc:	e0bffc8d 	sth	r2,-14(fp)
  8012c0:	00802f84 	movi	r2,190
  8012c4:	e0bffd0d 	sth	r2,-12(fp)
  8012c8:	00800704 	movi	r2,28
  8012cc:	e0bffd85 	stb	r2,-10(fp)

	draw_player(fb, &first, IDLE);
  8012d0:	d0a0d817 	ldw	r2,-31904(gp)
  8012d4:	e0fffb04 	addi	r3,fp,-20
  8012d8:	01800084 	movi	r6,2
  8012dc:	180b883a 	mov	r5,r3
  8012e0:	1009883a 	mov	r4,r2
  8012e4:	08005cc0 	call	8005cc <draw_player>
	draw_player(fb, &second, IDLE);
  8012e8:	d0a0d817 	ldw	r2,-31904(gp)
  8012ec:	e0fffc84 	addi	r3,fp,-14
  8012f0:	01800084 	movi	r6,2
  8012f4:	180b883a 	mov	r5,r3
  8012f8:	1009883a 	mov	r4,r2
  8012fc:	08005cc0 	call	8005cc <draw_player>

	// Ball init
	Ball ball = {VIDEO_CENTRE_W, random_int(BALL_INIT_MIN_H, BALL_INIT_MAX_H), random_int(0, 4)};
  801300:	00805004 	movi	r2,320
  801304:	e0bffe0d 	sth	r2,-8(fp)
  801308:	01406b84 	movi	r5,430
  80130c:	01000c84 	movi	r4,50
  801310:	0800fe40 	call	800fe4 <random_int>
  801314:	e0bffe8d 	sth	r2,-6(fp)
  801318:	01400104 	movi	r5,4
  80131c:	0009883a 	mov	r4,zero
  801320:	0800fe40 	call	800fe4 <random_int>
  801324:	e0bfff15 	stw	r2,-4(fp)
	draw_ball(fb, &ball, NO);
  801328:	d0a0d817 	ldw	r2,-31904(gp)
  80132c:	e0fffe04 	addi	r3,fp,-8
  801330:	01800104 	movi	r6,4
  801334:	180b883a 	mov	r5,r3
  801338:	1009883a 	mov	r4,r2
  80133c:	080091c0 	call	80091c <draw_ball>
	//

	alt_u8 first_points = 0;
  801340:	e03ff205 	stb	zero,-56(fp)
	alt_u8 second_points = 0;
  801344:	e03ff245 	stb	zero,-55(fp)

	alt_u8 goal_flag = 0;
  801348:	e03ff285 	stb	zero,-54(fp)
	alt_u8 END_flag = 0;
  80134c:	e03ff2c5 	stb	zero,-53(fp)

	alt_avalon_sgdma_do_async_transfer(dma, &ds[0]);
  801350:	d0a0d717 	ldw	r2,-31908(gp)
  801354:	01402034 	movhi	r5,128
  801358:	294f7704 	addi	r5,r5,15836
  80135c:	1009883a 	mov	r4,r2
  801360:	0801d6c0 	call	801d6c <alt_avalon_sgdma_do_async_transfer>

	while(1) {
		buttons = alt_up_parallel_port_read_data(keys); // buttons
  801364:	d0a0da17 	ldw	r2,-31896(gp)
  801368:	10800a17 	ldw	r2,40(r2)
  80136c:	10800037 	ldwio	r2,0(r2)
  801370:	e0bff415 	stw	r2,-48(fp)
		if (frame!=tframe) {
  801374:	d0a0d903 	ldbu	r2,-31900(gp)
  801378:	10c03fcc 	andi	r3,r2,255
  80137c:	e0bfef03 	ldbu	r2,-68(fp)
  801380:	18816426 	beq	r3,r2,801914 <main+0x8d4>
			tframe = frame;
  801384:	d0a0d903 	ldbu	r2,-31900(gp)
  801388:	e0bfef05 	stb	r2,-68(fp)

			// end of the game
			if (END_flag) {
  80138c:	e0bff2c3 	ldbu	r2,-53(fp)
  801390:	10000926 	beq	r2,zero,8013b8 <main+0x378>
				display_final_message(fb, first_points, second_points);
  801394:	d0a0d817 	ldw	r2,-31904(gp)
  801398:	e0fff203 	ldbu	r3,-56(fp)
  80139c:	e13ff243 	ldbu	r4,-55(fp)
  8013a0:	200d883a 	mov	r6,r4
  8013a4:	180b883a 	mov	r5,r3
  8013a8:	1009883a 	mov	r4,r2
  8013ac:	0800f680 	call	800f68 <display_final_message>
				asm("br . + 4"); // ???????????????????
  8013b0:	00000006 	br	8013b4 <main+0x374>
				continue;
  8013b4:	00015806 	br	801918 <main+0x8d8>
			}

			//

			// goal -> bring ball back to initial position
			if (goal_flag) {
  8013b8:	e0bff283 	ldbu	r2,-54(fp)
  8013bc:	10001626 	beq	r2,zero,801418 <main+0x3d8>
				delete_ball(fb, &ball);
  8013c0:	d0a0d817 	ldw	r2,-31904(gp)
  8013c4:	e0fffe04 	addi	r3,fp,-8
  8013c8:	180b883a 	mov	r5,r3
  8013cc:	1009883a 	mov	r4,r2
  8013d0:	080086c0 	call	80086c <delete_ball>
				ball.x = VIDEO_CENTRE_W;
  8013d4:	00805004 	movi	r2,320
  8013d8:	e0bffe0d 	sth	r2,-8(fp)
				ball.y = random_int(BALL_INIT_MIN_H, BALL_INIT_MAX_H);
  8013dc:	01406b84 	movi	r5,430
  8013e0:	01000c84 	movi	r4,50
  8013e4:	0800fe40 	call	800fe4 <random_int>
  8013e8:	e0bffe8d 	sth	r2,-6(fp)
				ball.movement = random_int(0, 4);
  8013ec:	01400104 	movi	r5,4
  8013f0:	0009883a 	mov	r4,zero
  8013f4:	0800fe40 	call	800fe4 <random_int>
  8013f8:	e0bfff15 	stw	r2,-4(fp)
				draw_ball(fb, &ball, NO);
  8013fc:	d0a0d817 	ldw	r2,-31904(gp)
  801400:	e0fffe04 	addi	r3,fp,-8
  801404:	01800104 	movi	r6,4
  801408:	180b883a 	mov	r5,r3
  80140c:	1009883a 	mov	r4,r2
  801410:	080091c0 	call	80091c <draw_ball>

				goal_flag = 0;
  801414:	e03ff285 	stb	zero,-54(fp)
			}
			//


			switch (ball.movement) {
  801418:	e0bfff17 	ldw	r2,-4(fp)
  80141c:	10c00168 	cmpgeui	r3,r2,5
  801420:	1800fa1e 	bne	r3,zero,80180c <main+0x7cc>
  801424:	100690ba 	slli	r3,r2,2
  801428:	00802034 	movhi	r2,128
  80142c:	10850f04 	addi	r2,r2,5180
  801430:	1885883a 	add	r2,r3,r2
  801434:	10800017 	ldw	r2,0(r2)
  801438:	1000683a 	jmp	r2
  80143c:	00801450 	cmplti	r2,zero,81
  801440:	00801540 	call	80154 <__alt_mem_sdram_controller_0+0x80154>
  801444:	00801630 	cmpltui	r2,zero,88
  801448:	00801720 	cmpeqi	r2,zero,92
  80144c:	00801808 	cmpgei	r2,zero,96
				case UR:
					if (ball.y <= FIELD_UPPER_BORDER) { // collision with upper border
  801450:	e0bffe8b 	ldhu	r2,-6(fp)
  801454:	10bfffcc 	andi	r2,r2,65535
  801458:	10800428 	cmpgeui	r2,r2,16
  80145c:	1000031e 	bne	r2,zero,80146c <main+0x42c>
						ball.movement = LR;
  801460:	00800044 	movi	r2,1
  801464:	e0bfff15 	stw	r2,-4(fp)
					} else { // nothing happened
						draw_ball(fb, &ball, UR);
						++ball.x;
						--ball.y;
					}
				break;
  801468:	0000e806 	br	80180c <main+0x7cc>

			switch (ball.movement) {
				case UR:
					if (ball.y <= FIELD_UPPER_BORDER) { // collision with upper border
						ball.movement = LR;
					} else if (ball.x + BALL_W >= BALL_RIGHT_BORDER) { // collision with right border
  80146c:	e0bffe0b 	ldhu	r2,-8(fp)
  801470:	10bfffcc 	andi	r2,r2,65535
  801474:	10800144 	addi	r2,r2,5
  801478:	10809ed0 	cmplti	r2,r2,635
  80147c:	1000231e 	bne	r2,zero,80150c <main+0x4cc>
						if (ball.y + BALL_H < second.y || ball.y > second.y + PLAYER_H) { // goal to second player
  801480:	e0bffe8b 	ldhu	r2,-6(fp)
  801484:	10bfffcc 	andi	r2,r2,65535
  801488:	10c00144 	addi	r3,r2,5
  80148c:	e0bffd0b 	ldhu	r2,-12(fp)
  801490:	10bfffcc 	andi	r2,r2,65535
  801494:	18800616 	blt	r3,r2,8014b0 <main+0x470>
  801498:	e0bffe8b 	ldhu	r2,-6(fp)
  80149c:	10bfffcc 	andi	r2,r2,65535
  8014a0:	e0fffd0b 	ldhu	r3,-12(fp)
  8014a4:	18ffffcc 	andi	r3,r3,65535
  8014a8:	18c01904 	addi	r3,r3,100
  8014ac:	1880140e 	bge	r3,r2,801500 <main+0x4c0>
							goal_flag = 1;
  8014b0:	00800044 	movi	r2,1
  8014b4:	e0bff285 	stb	r2,-54(fp)
							++first_points;
  8014b8:	e0bff203 	ldbu	r2,-56(fp)
  8014bc:	10800044 	addi	r2,r2,1
  8014c0:	e0bff205 	stb	r2,-56(fp)
							display_points(fb, FIRST, first_points, disp_points);
  8014c4:	d0a0d817 	ldw	r2,-31904(gp)
  8014c8:	e0fff203 	ldbu	r3,-56(fp)
  8014cc:	e13ff504 	addi	r4,fp,-44
  8014d0:	200f883a 	mov	r7,r4
  8014d4:	180d883a 	mov	r6,r3
  8014d8:	000b883a 	mov	r5,zero
  8014dc:	1009883a 	mov	r4,r2
  8014e0:	0800dd80 	call	800dd8 <display_points>

							if (first_points == MAX_GOALS) {
  8014e4:	e0bff203 	ldbu	r2,-56(fp)
  8014e8:	108000d8 	cmpnei	r2,r2,3
  8014ec:	1000021e 	bne	r2,zero,8014f8 <main+0x4b8>
								END_flag = 1;
  8014f0:	00800044 	movi	r2,1
  8014f4:	e0bff2c5 	stb	r2,-53(fp)
							}

							asm("br . + 4"); // ???????????????????
  8014f8:	00000006 	br	8014fc <main+0x4bc>
							continue;
  8014fc:	00010606 	br	801918 <main+0x8d8>
						} else { // second player saved the target
							ball.movement = UL;
  801500:	008000c4 	movi	r2,3
  801504:	e0bfff15 	stw	r2,-4(fp)
					} else { // nothing happened
						draw_ball(fb, &ball, UR);
						++ball.x;
						--ball.y;
					}
				break;
  801508:	0000c006 	br	80180c <main+0x7cc>
							continue;
						} else { // second player saved the target
							ball.movement = UL;
						}
					} else { // nothing happened
						draw_ball(fb, &ball, UR);
  80150c:	d0a0d817 	ldw	r2,-31904(gp)
  801510:	e0fffe04 	addi	r3,fp,-8
  801514:	000d883a 	mov	r6,zero
  801518:	180b883a 	mov	r5,r3
  80151c:	1009883a 	mov	r4,r2
  801520:	080091c0 	call	80091c <draw_ball>
						++ball.x;
  801524:	e0bffe0b 	ldhu	r2,-8(fp)
  801528:	10800044 	addi	r2,r2,1
  80152c:	e0bffe0d 	sth	r2,-8(fp)
						--ball.y;
  801530:	e0bffe8b 	ldhu	r2,-6(fp)
  801534:	10bfffc4 	addi	r2,r2,-1
  801538:	e0bffe8d 	sth	r2,-6(fp)
					}
				break;
  80153c:	0000b306 	br	80180c <main+0x7cc>

				case LR:
					if (ball.y + BALL_H >= FIELD_LOWER_BORDER) { // collision with lower border
  801540:	e0bffe8b 	ldhu	r2,-6(fp)
  801544:	10bfffcc 	andi	r2,r2,65535
  801548:	10800144 	addi	r2,r2,5
  80154c:	10807450 	cmplti	r2,r2,465
  801550:	1000021e 	bne	r2,zero,80155c <main+0x51c>
						ball.movement = UR;
  801554:	e03fff15 	stw	zero,-4(fp)
					} else { // nothing happened
						draw_ball(fb, &ball, LR);
						++ball.x;
						++ball.y;
					}
				break;
  801558:	0000ac06 	br	80180c <main+0x7cc>
				break;

				case LR:
					if (ball.y + BALL_H >= FIELD_LOWER_BORDER) { // collision with lower border
						ball.movement = UR;
					} else if (ball.x + BALL_W >= BALL_RIGHT_BORDER) { // collision with right border
  80155c:	e0bffe0b 	ldhu	r2,-8(fp)
  801560:	10bfffcc 	andi	r2,r2,65535
  801564:	10800144 	addi	r2,r2,5
  801568:	10809ed0 	cmplti	r2,r2,635
  80156c:	1000231e 	bne	r2,zero,8015fc <main+0x5bc>
						if (ball.y  + BALL_H < second.y || ball.y > second.y + PLAYER_H) {  // goal to first player
  801570:	e0bffe8b 	ldhu	r2,-6(fp)
  801574:	10bfffcc 	andi	r2,r2,65535
  801578:	10c00144 	addi	r3,r2,5
  80157c:	e0bffd0b 	ldhu	r2,-12(fp)
  801580:	10bfffcc 	andi	r2,r2,65535
  801584:	18800616 	blt	r3,r2,8015a0 <main+0x560>
  801588:	e0bffe8b 	ldhu	r2,-6(fp)
  80158c:	10bfffcc 	andi	r2,r2,65535
  801590:	e0fffd0b 	ldhu	r3,-12(fp)
  801594:	18ffffcc 	andi	r3,r3,65535
  801598:	18c01904 	addi	r3,r3,100
  80159c:	1880140e 	bge	r3,r2,8015f0 <main+0x5b0>
							goal_flag = 1;
  8015a0:	00800044 	movi	r2,1
  8015a4:	e0bff285 	stb	r2,-54(fp)

							++first_points;
  8015a8:	e0bff203 	ldbu	r2,-56(fp)
  8015ac:	10800044 	addi	r2,r2,1
  8015b0:	e0bff205 	stb	r2,-56(fp)
							display_points(fb, FIRST, first_points, disp_points);
  8015b4:	d0a0d817 	ldw	r2,-31904(gp)
  8015b8:	e0fff203 	ldbu	r3,-56(fp)
  8015bc:	e13ff504 	addi	r4,fp,-44
  8015c0:	200f883a 	mov	r7,r4
  8015c4:	180d883a 	mov	r6,r3
  8015c8:	000b883a 	mov	r5,zero
  8015cc:	1009883a 	mov	r4,r2
  8015d0:	0800dd80 	call	800dd8 <display_points>

							if (first_points == MAX_GOALS) {
  8015d4:	e0bff203 	ldbu	r2,-56(fp)
  8015d8:	108000d8 	cmpnei	r2,r2,3
  8015dc:	1000021e 	bne	r2,zero,8015e8 <main+0x5a8>
								END_flag = 1;
  8015e0:	00800044 	movi	r2,1
  8015e4:	e0bff2c5 	stb	r2,-53(fp)
							}

							asm("br . + 4"); // ???????????????????
  8015e8:	00000006 	br	8015ec <main+0x5ac>
							continue;
  8015ec:	0000ca06 	br	801918 <main+0x8d8>
						} else { // first player saved the target
							ball.movement = LL;
  8015f0:	00800084 	movi	r2,2
  8015f4:	e0bfff15 	stw	r2,-4(fp)
					} else { // nothing happened
						draw_ball(fb, &ball, LR);
						++ball.x;
						++ball.y;
					}
				break;
  8015f8:	00008406 	br	80180c <main+0x7cc>
						} else { // first player saved the target
							ball.movement = LL;
						}

					} else { // nothing happened
						draw_ball(fb, &ball, LR);
  8015fc:	d0a0d817 	ldw	r2,-31904(gp)
  801600:	e0fffe04 	addi	r3,fp,-8
  801604:	01800044 	movi	r6,1
  801608:	180b883a 	mov	r5,r3
  80160c:	1009883a 	mov	r4,r2
  801610:	080091c0 	call	80091c <draw_ball>
						++ball.x;
  801614:	e0bffe0b 	ldhu	r2,-8(fp)
  801618:	10800044 	addi	r2,r2,1
  80161c:	e0bffe0d 	sth	r2,-8(fp)
						++ball.y;
  801620:	e0bffe8b 	ldhu	r2,-6(fp)
  801624:	10800044 	addi	r2,r2,1
  801628:	e0bffe8d 	sth	r2,-6(fp)
					}
				break;
  80162c:	00007706 	br	80180c <main+0x7cc>

				case LL:
					if (ball.y + BALL_H >= FIELD_LOWER_BORDER) { // collision with lower border
  801630:	e0bffe8b 	ldhu	r2,-6(fp)
  801634:	10bfffcc 	andi	r2,r2,65535
  801638:	10800144 	addi	r2,r2,5
  80163c:	10807450 	cmplti	r2,r2,465
  801640:	1000031e 	bne	r2,zero,801650 <main+0x610>
						ball.movement = UL;
  801644:	008000c4 	movi	r2,3
  801648:	e0bfff15 	stw	r2,-4(fp)
					} else { // nothing happened
						draw_ball(fb, &ball, LL);
						--ball.x;
						++ball.y;
					}
				break;
  80164c:	00006f06 	br	80180c <main+0x7cc>
				break;

				case LL:
					if (ball.y + BALL_H >= FIELD_LOWER_BORDER) { // collision with lower border
						ball.movement = UL;
					} else if (ball.x <= BALL_LEFT_BORDER) { // collision with left border
  801650:	e0bffe0b 	ldhu	r2,-8(fp)
  801654:	10bfffcc 	andi	r2,r2,65535
  801658:	108001e8 	cmpgeui	r2,r2,7
  80165c:	1000231e 	bne	r2,zero,8016ec <main+0x6ac>
						if (ball.y + BALL_H < first.y || ball.y > first.y + PLAYER_H) { // goal to first player
  801660:	e0bffe8b 	ldhu	r2,-6(fp)
  801664:	10bfffcc 	andi	r2,r2,65535
  801668:	10c00144 	addi	r3,r2,5
  80166c:	e0bffb8b 	ldhu	r2,-18(fp)
  801670:	10bfffcc 	andi	r2,r2,65535
  801674:	18800616 	blt	r3,r2,801690 <main+0x650>
  801678:	e0bffe8b 	ldhu	r2,-6(fp)
  80167c:	10bfffcc 	andi	r2,r2,65535
  801680:	e0fffb8b 	ldhu	r3,-18(fp)
  801684:	18ffffcc 	andi	r3,r3,65535
  801688:	18c01904 	addi	r3,r3,100
  80168c:	1880140e 	bge	r3,r2,8016e0 <main+0x6a0>
							goal_flag = 1;
  801690:	00800044 	movi	r2,1
  801694:	e0bff285 	stb	r2,-54(fp)

							++second_points;
  801698:	e0bff243 	ldbu	r2,-55(fp)
  80169c:	10800044 	addi	r2,r2,1
  8016a0:	e0bff245 	stb	r2,-55(fp)
							display_points(fb, SECOND, second_points, disp_points);
  8016a4:	d0a0d817 	ldw	r2,-31904(gp)
  8016a8:	e0fff243 	ldbu	r3,-55(fp)
  8016ac:	e13ff504 	addi	r4,fp,-44
  8016b0:	200f883a 	mov	r7,r4
  8016b4:	180d883a 	mov	r6,r3
  8016b8:	01400044 	movi	r5,1
  8016bc:	1009883a 	mov	r4,r2
  8016c0:	0800dd80 	call	800dd8 <display_points>

							if (second_points == MAX_GOALS) {
  8016c4:	e0bff243 	ldbu	r2,-55(fp)
  8016c8:	108000d8 	cmpnei	r2,r2,3
  8016cc:	1000021e 	bne	r2,zero,8016d8 <main+0x698>
								END_flag = 1;
  8016d0:	00800044 	movi	r2,1
  8016d4:	e0bff2c5 	stb	r2,-53(fp)
							}

							asm("br . + 4"); // ???????????????????
  8016d8:	00000006 	br	8016dc <main+0x69c>
							continue;
  8016dc:	00008e06 	br	801918 <main+0x8d8>
						} else { // first player saved the target
							ball.movement = LR;
  8016e0:	00800044 	movi	r2,1
  8016e4:	e0bfff15 	stw	r2,-4(fp)
					} else { // nothing happened
						draw_ball(fb, &ball, LL);
						--ball.x;
						++ball.y;
					}
				break;
  8016e8:	00004806 	br	80180c <main+0x7cc>
							continue;
						} else { // first player saved the target
							ball.movement = LR;
						}
					} else { // nothing happened
						draw_ball(fb, &ball, LL);
  8016ec:	d0a0d817 	ldw	r2,-31904(gp)
  8016f0:	e0fffe04 	addi	r3,fp,-8
  8016f4:	01800084 	movi	r6,2
  8016f8:	180b883a 	mov	r5,r3
  8016fc:	1009883a 	mov	r4,r2
  801700:	080091c0 	call	80091c <draw_ball>
						--ball.x;
  801704:	e0bffe0b 	ldhu	r2,-8(fp)
  801708:	10bfffc4 	addi	r2,r2,-1
  80170c:	e0bffe0d 	sth	r2,-8(fp)
						++ball.y;
  801710:	e0bffe8b 	ldhu	r2,-6(fp)
  801714:	10800044 	addi	r2,r2,1
  801718:	e0bffe8d 	sth	r2,-6(fp)
					}
				break;
  80171c:	00003b06 	br	80180c <main+0x7cc>

				case UL:
					if (ball.y <= FIELD_UPPER_BORDER) { // collision with lower border
  801720:	e0bffe8b 	ldhu	r2,-6(fp)
  801724:	10bfffcc 	andi	r2,r2,65535
  801728:	10800428 	cmpgeui	r2,r2,16
  80172c:	1000031e 	bne	r2,zero,80173c <main+0x6fc>
						ball.movement = LL;
  801730:	00800084 	movi	r2,2
  801734:	e0bfff15 	stw	r2,-4(fp)
					} else { //nothing happened
						draw_ball(fb, &ball, UL);
						--ball.x;
						--ball.y;
					}
				break;
  801738:	00003406 	br	80180c <main+0x7cc>
				break;

				case UL:
					if (ball.y <= FIELD_UPPER_BORDER) { // collision with lower border
						ball.movement = LL;
					} else if (ball.x <= BALL_LEFT_BORDER) { // collision with left border
  80173c:	e0bffe0b 	ldhu	r2,-8(fp)
  801740:	10bfffcc 	andi	r2,r2,65535
  801744:	108001e8 	cmpgeui	r2,r2,7
  801748:	1000221e 	bne	r2,zero,8017d4 <main+0x794>
						if (ball.y + BALL_H < first.y || ball.y > first.y + PLAYER_H) { // goal to second player
  80174c:	e0bffe8b 	ldhu	r2,-6(fp)
  801750:	10bfffcc 	andi	r2,r2,65535
  801754:	10c00144 	addi	r3,r2,5
  801758:	e0bffb8b 	ldhu	r2,-18(fp)
  80175c:	10bfffcc 	andi	r2,r2,65535
  801760:	18800616 	blt	r3,r2,80177c <main+0x73c>
  801764:	e0bffe8b 	ldhu	r2,-6(fp)
  801768:	10bfffcc 	andi	r2,r2,65535
  80176c:	e0fffb8b 	ldhu	r3,-18(fp)
  801770:	18ffffcc 	andi	r3,r3,65535
  801774:	18c01904 	addi	r3,r3,100
  801778:	1880140e 	bge	r3,r2,8017cc <main+0x78c>
							goal_flag = 1;
  80177c:	00800044 	movi	r2,1
  801780:	e0bff285 	stb	r2,-54(fp)

							++second_points;
  801784:	e0bff243 	ldbu	r2,-55(fp)
  801788:	10800044 	addi	r2,r2,1
  80178c:	e0bff245 	stb	r2,-55(fp)
							display_points(fb, SECOND, second_points, disp_points);
  801790:	d0a0d817 	ldw	r2,-31904(gp)
  801794:	e0fff243 	ldbu	r3,-55(fp)
  801798:	e13ff504 	addi	r4,fp,-44
  80179c:	200f883a 	mov	r7,r4
  8017a0:	180d883a 	mov	r6,r3
  8017a4:	01400044 	movi	r5,1
  8017a8:	1009883a 	mov	r4,r2
  8017ac:	0800dd80 	call	800dd8 <display_points>

							if (second_points == MAX_GOALS) {
  8017b0:	e0bff243 	ldbu	r2,-55(fp)
  8017b4:	108000d8 	cmpnei	r2,r2,3
  8017b8:	1000021e 	bne	r2,zero,8017c4 <main+0x784>
								END_flag = 1;
  8017bc:	00800044 	movi	r2,1
  8017c0:	e0bff2c5 	stb	r2,-53(fp)
							}

							asm("br . + 4"); // ???????????????????
  8017c4:	00000006 	br	8017c8 <main+0x788>
							continue;
  8017c8:	00005306 	br	801918 <main+0x8d8>
						} else { // first player saved the target
							ball.movement = UR;
  8017cc:	e03fff15 	stw	zero,-4(fp)
					} else { //nothing happened
						draw_ball(fb, &ball, UL);
						--ball.x;
						--ball.y;
					}
				break;
  8017d0:	00000e06 	br	80180c <main+0x7cc>
						} else { // first player saved the target
							ball.movement = UR;
						}

					} else { //nothing happened
						draw_ball(fb, &ball, UL);
  8017d4:	d0a0d817 	ldw	r2,-31904(gp)
  8017d8:	e0fffe04 	addi	r3,fp,-8
  8017dc:	018000c4 	movi	r6,3
  8017e0:	180b883a 	mov	r5,r3
  8017e4:	1009883a 	mov	r4,r2
  8017e8:	080091c0 	call	80091c <draw_ball>
						--ball.x;
  8017ec:	e0bffe0b 	ldhu	r2,-8(fp)
  8017f0:	10bfffc4 	addi	r2,r2,-1
  8017f4:	e0bffe0d 	sth	r2,-8(fp)
						--ball.y;
  8017f8:	e0bffe8b 	ldhu	r2,-6(fp)
  8017fc:	10bfffc4 	addi	r2,r2,-1
  801800:	e0bffe8d 	sth	r2,-6(fp)
					}
				break;
  801804:	00000106 	br	80180c <main+0x7cc>

				case NO:
				//empty
				break;
  801808:	0001883a 	nop




			// Handle buttons
			if (button_1(buttons)) { // first DOWN
  80180c:	e0bff417 	ldw	r2,-48(fp)
  801810:	1080004c 	andi	r2,r2,1
  801814:	10000e1e 	bne	r2,zero,801850 <main+0x810>
				if (first.y + PLAYER_H <= FIELD_LOWER_BORDER) {
  801818:	e0bffb8b 	ldhu	r2,-18(fp)
  80181c:	10bfffcc 	andi	r2,r2,65535
  801820:	10801904 	addi	r2,r2,100
  801824:	10807488 	cmpgei	r2,r2,466
  801828:	1000091e 	bne	r2,zero,801850 <main+0x810>
					draw_player(fb, &first, DOWN);
  80182c:	d0a0d817 	ldw	r2,-31904(gp)
  801830:	e0fffb04 	addi	r3,fp,-20
  801834:	01800044 	movi	r6,1
  801838:	180b883a 	mov	r5,r3
  80183c:	1009883a 	mov	r4,r2
  801840:	08005cc0 	call	8005cc <draw_player>
					++first.y;
  801844:	e0bffb8b 	ldhu	r2,-18(fp)
  801848:	10800044 	addi	r2,r2,1
  80184c:	e0bffb8d 	sth	r2,-18(fp)
				}
			}

			if (button_2(buttons)) { // first UP
  801850:	e0bff417 	ldw	r2,-48(fp)
  801854:	1080020c 	andi	r2,r2,8
  801858:	10000d1e 	bne	r2,zero,801890 <main+0x850>
				if (first.y > FIELD_UPPER_BORDER) {
  80185c:	e0bffb8b 	ldhu	r2,-18(fp)
  801860:	10bfffcc 	andi	r2,r2,65535
  801864:	10800430 	cmpltui	r2,r2,16
  801868:	1000091e 	bne	r2,zero,801890 <main+0x850>
					draw_player(fb, &first, UP);
  80186c:	d0a0d817 	ldw	r2,-31904(gp)
  801870:	e0fffb04 	addi	r3,fp,-20
  801874:	000d883a 	mov	r6,zero
  801878:	180b883a 	mov	r5,r3
  80187c:	1009883a 	mov	r4,r2
  801880:	08005cc0 	call	8005cc <draw_player>
					--first.y;
  801884:	e0bffb8b 	ldhu	r2,-18(fp)
  801888:	10bfffc4 	addi	r2,r2,-1
  80188c:	e0bffb8d 	sth	r2,-18(fp)
				}
			}

			if (button_3(buttons)) { // second DOWN
  801890:	e0bff417 	ldw	r2,-48(fp)
  801894:	1080010c 	andi	r2,r2,4
  801898:	10000e1e 	bne	r2,zero,8018d4 <main+0x894>
				if (second.y + PLAYER_H <= FIELD_LOWER_BORDER) {
  80189c:	e0bffd0b 	ldhu	r2,-12(fp)
  8018a0:	10bfffcc 	andi	r2,r2,65535
  8018a4:	10801904 	addi	r2,r2,100
  8018a8:	10807488 	cmpgei	r2,r2,466
  8018ac:	1000091e 	bne	r2,zero,8018d4 <main+0x894>
					draw_player(fb, &second, DOWN);
  8018b0:	d0a0d817 	ldw	r2,-31904(gp)
  8018b4:	e0fffc84 	addi	r3,fp,-14
  8018b8:	01800044 	movi	r6,1
  8018bc:	180b883a 	mov	r5,r3
  8018c0:	1009883a 	mov	r4,r2
  8018c4:	08005cc0 	call	8005cc <draw_player>
					++second.y;
  8018c8:	e0bffd0b 	ldhu	r2,-12(fp)
  8018cc:	10800044 	addi	r2,r2,1
  8018d0:	e0bffd0d 	sth	r2,-12(fp)
				}
			}

			if (button_4(buttons)) { // second UP
  8018d4:	e0bff417 	ldw	r2,-48(fp)
  8018d8:	1080008c 	andi	r2,r2,2
  8018dc:	10000d1e 	bne	r2,zero,801914 <main+0x8d4>
				if (second.y > FIELD_UPPER_BORDER) {
  8018e0:	e0bffd0b 	ldhu	r2,-12(fp)
  8018e4:	10bfffcc 	andi	r2,r2,65535
  8018e8:	10800430 	cmpltui	r2,r2,16
  8018ec:	1000091e 	bne	r2,zero,801914 <main+0x8d4>
					draw_player(fb, &second, UP);
  8018f0:	d0a0d817 	ldw	r2,-31904(gp)
  8018f4:	e0fffc84 	addi	r3,fp,-14
  8018f8:	000d883a 	mov	r6,zero
  8018fc:	180b883a 	mov	r5,r3
  801900:	1009883a 	mov	r4,r2
  801904:	08005cc0 	call	8005cc <draw_player>
					--second.y;
  801908:	e0bffd0b 	ldhu	r2,-12(fp)
  80190c:	10bfffc4 	addi	r2,r2,-1
  801910:	e0bffd0d 	sth	r2,-12(fp)
			//

		}


		asm("br . + 4");
  801914:	00000006 	br	801918 <main+0x8d8>
	}
  801918:	003e9206 	br	801364 <_gp+0xffff5914>

0080191c <__divsi3>:
  80191c:	20001b16 	blt	r4,zero,80198c <__divsi3+0x70>
  801920:	000f883a 	mov	r7,zero
  801924:	28001616 	blt	r5,zero,801980 <__divsi3+0x64>
  801928:	200d883a 	mov	r6,r4
  80192c:	29001a2e 	bgeu	r5,r4,801998 <__divsi3+0x7c>
  801930:	00800804 	movi	r2,32
  801934:	00c00044 	movi	r3,1
  801938:	00000106 	br	801940 <__divsi3+0x24>
  80193c:	10000d26 	beq	r2,zero,801974 <__divsi3+0x58>
  801940:	294b883a 	add	r5,r5,r5
  801944:	10bfffc4 	addi	r2,r2,-1
  801948:	18c7883a 	add	r3,r3,r3
  80194c:	293ffb36 	bltu	r5,r4,80193c <_gp+0xffff5eec>
  801950:	0005883a 	mov	r2,zero
  801954:	18000726 	beq	r3,zero,801974 <__divsi3+0x58>
  801958:	0005883a 	mov	r2,zero
  80195c:	31400236 	bltu	r6,r5,801968 <__divsi3+0x4c>
  801960:	314dc83a 	sub	r6,r6,r5
  801964:	10c4b03a 	or	r2,r2,r3
  801968:	1806d07a 	srli	r3,r3,1
  80196c:	280ad07a 	srli	r5,r5,1
  801970:	183ffa1e 	bne	r3,zero,80195c <_gp+0xffff5f0c>
  801974:	38000126 	beq	r7,zero,80197c <__divsi3+0x60>
  801978:	0085c83a 	sub	r2,zero,r2
  80197c:	f800283a 	ret
  801980:	014bc83a 	sub	r5,zero,r5
  801984:	39c0005c 	xori	r7,r7,1
  801988:	003fe706 	br	801928 <_gp+0xffff5ed8>
  80198c:	0109c83a 	sub	r4,zero,r4
  801990:	01c00044 	movi	r7,1
  801994:	003fe306 	br	801924 <_gp+0xffff5ed4>
  801998:	00c00044 	movi	r3,1
  80199c:	003fee06 	br	801958 <_gp+0xffff5f08>

008019a0 <__modsi3>:
  8019a0:	20001716 	blt	r4,zero,801a00 <__modsi3+0x60>
  8019a4:	000f883a 	mov	r7,zero
  8019a8:	2005883a 	mov	r2,r4
  8019ac:	28001216 	blt	r5,zero,8019f8 <__modsi3+0x58>
  8019b0:	2900162e 	bgeu	r5,r4,801a0c <__modsi3+0x6c>
  8019b4:	01800804 	movi	r6,32
  8019b8:	00c00044 	movi	r3,1
  8019bc:	00000106 	br	8019c4 <__modsi3+0x24>
  8019c0:	30000a26 	beq	r6,zero,8019ec <__modsi3+0x4c>
  8019c4:	294b883a 	add	r5,r5,r5
  8019c8:	31bfffc4 	addi	r6,r6,-1
  8019cc:	18c7883a 	add	r3,r3,r3
  8019d0:	293ffb36 	bltu	r5,r4,8019c0 <_gp+0xffff5f70>
  8019d4:	18000526 	beq	r3,zero,8019ec <__modsi3+0x4c>
  8019d8:	1806d07a 	srli	r3,r3,1
  8019dc:	11400136 	bltu	r2,r5,8019e4 <__modsi3+0x44>
  8019e0:	1145c83a 	sub	r2,r2,r5
  8019e4:	280ad07a 	srli	r5,r5,1
  8019e8:	183ffb1e 	bne	r3,zero,8019d8 <_gp+0xffff5f88>
  8019ec:	38000126 	beq	r7,zero,8019f4 <__modsi3+0x54>
  8019f0:	0085c83a 	sub	r2,zero,r2
  8019f4:	f800283a 	ret
  8019f8:	014bc83a 	sub	r5,zero,r5
  8019fc:	003fec06 	br	8019b0 <_gp+0xffff5f60>
  801a00:	0109c83a 	sub	r4,zero,r4
  801a04:	01c00044 	movi	r7,1
  801a08:	003fe706 	br	8019a8 <_gp+0xffff5f58>
  801a0c:	00c00044 	movi	r3,1
  801a10:	003ff106 	br	8019d8 <_gp+0xffff5f88>

00801a14 <__udivsi3>:
  801a14:	200d883a 	mov	r6,r4
  801a18:	2900152e 	bgeu	r5,r4,801a70 <__udivsi3+0x5c>
  801a1c:	28001416 	blt	r5,zero,801a70 <__udivsi3+0x5c>
  801a20:	00800804 	movi	r2,32
  801a24:	00c00044 	movi	r3,1
  801a28:	00000206 	br	801a34 <__udivsi3+0x20>
  801a2c:	10000e26 	beq	r2,zero,801a68 <__udivsi3+0x54>
  801a30:	28000516 	blt	r5,zero,801a48 <__udivsi3+0x34>
  801a34:	294b883a 	add	r5,r5,r5
  801a38:	10bfffc4 	addi	r2,r2,-1
  801a3c:	18c7883a 	add	r3,r3,r3
  801a40:	293ffa36 	bltu	r5,r4,801a2c <_gp+0xffff5fdc>
  801a44:	18000826 	beq	r3,zero,801a68 <__udivsi3+0x54>
  801a48:	0005883a 	mov	r2,zero
  801a4c:	31400236 	bltu	r6,r5,801a58 <__udivsi3+0x44>
  801a50:	314dc83a 	sub	r6,r6,r5
  801a54:	10c4b03a 	or	r2,r2,r3
  801a58:	1806d07a 	srli	r3,r3,1
  801a5c:	280ad07a 	srli	r5,r5,1
  801a60:	183ffa1e 	bne	r3,zero,801a4c <_gp+0xffff5ffc>
  801a64:	f800283a 	ret
  801a68:	0005883a 	mov	r2,zero
  801a6c:	f800283a 	ret
  801a70:	00c00044 	movi	r3,1
  801a74:	003ff406 	br	801a48 <_gp+0xffff5ff8>

00801a78 <__umodsi3>:
  801a78:	2005883a 	mov	r2,r4
  801a7c:	2900122e 	bgeu	r5,r4,801ac8 <__umodsi3+0x50>
  801a80:	28001116 	blt	r5,zero,801ac8 <__umodsi3+0x50>
  801a84:	01800804 	movi	r6,32
  801a88:	00c00044 	movi	r3,1
  801a8c:	00000206 	br	801a98 <__umodsi3+0x20>
  801a90:	30000c26 	beq	r6,zero,801ac4 <__umodsi3+0x4c>
  801a94:	28000516 	blt	r5,zero,801aac <__umodsi3+0x34>
  801a98:	294b883a 	add	r5,r5,r5
  801a9c:	31bfffc4 	addi	r6,r6,-1
  801aa0:	18c7883a 	add	r3,r3,r3
  801aa4:	293ffa36 	bltu	r5,r4,801a90 <_gp+0xffff6040>
  801aa8:	18000626 	beq	r3,zero,801ac4 <__umodsi3+0x4c>
  801aac:	1806d07a 	srli	r3,r3,1
  801ab0:	11400136 	bltu	r2,r5,801ab8 <__umodsi3+0x40>
  801ab4:	1145c83a 	sub	r2,r2,r5
  801ab8:	280ad07a 	srli	r5,r5,1
  801abc:	183ffb1e 	bne	r3,zero,801aac <_gp+0xffff605c>
  801ac0:	f800283a 	ret
  801ac4:	f800283a 	ret
  801ac8:	00c00044 	movi	r3,1
  801acc:	003ff706 	br	801aac <_gp+0xffff605c>

00801ad0 <srand>:
  801ad0:	00802034 	movhi	r2,128
  801ad4:	108f6f04 	addi	r2,r2,15804
  801ad8:	11000015 	stw	r4,0(r2)
  801adc:	10000115 	stw	zero,4(r2)
  801ae0:	f800283a 	ret

00801ae4 <rand>:
  801ae4:	01402034 	movhi	r5,128
  801ae8:	294f6f04 	addi	r5,r5,15804
  801aec:	29800017 	ldw	r6,0(r5)
  801af0:	28800117 	ldw	r2,4(r5)
  801af4:	00d32574 	movhi	r3,19605
  801af8:	011614b4 	movhi	r4,22610
  801afc:	18dfcb44 	addi	r3,r3,32557
  801b00:	213d0b44 	addi	r4,r4,-3027
  801b04:	3109383a 	mul	r4,r6,r4
  801b08:	10c5383a 	mul	r2,r2,r3
  801b0c:	1105883a 	add	r2,r2,r4
  801b10:	30c8383a 	mulxuu	r4,r6,r3
  801b14:	30c7383a 	mul	r3,r6,r3
  801b18:	1105883a 	add	r2,r2,r4
  801b1c:	19000044 	addi	r4,r3,1
  801b20:	20c7803a 	cmpltu	r3,r4,r3
  801b24:	1887883a 	add	r3,r3,r2
  801b28:	00a00034 	movhi	r2,32768
  801b2c:	10bfffc4 	addi	r2,r2,-1
  801b30:	29000015 	stw	r4,0(r5)
  801b34:	28c00115 	stw	r3,4(r5)
  801b38:	1884703a 	and	r2,r3,r2
  801b3c:	f800283a 	ret

00801b40 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  801b40:	defffc04 	addi	sp,sp,-16
  801b44:	df000315 	stw	fp,12(sp)
  801b48:	df000304 	addi	fp,sp,12
  801b4c:	e13ffd15 	stw	r4,-12(fp)
  801b50:	e17ffe15 	stw	r5,-8(fp)
  801b54:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  801b58:	e0fffe17 	ldw	r3,-8(fp)
  801b5c:	e0bffd17 	ldw	r2,-12(fp)
  801b60:	18800c26 	beq	r3,r2,801b94 <alt_load_section+0x54>
  {
    while( to != end )
  801b64:	00000806 	br	801b88 <alt_load_section+0x48>
    {
      *to++ = *from++;
  801b68:	e0bffe17 	ldw	r2,-8(fp)
  801b6c:	10c00104 	addi	r3,r2,4
  801b70:	e0fffe15 	stw	r3,-8(fp)
  801b74:	e0fffd17 	ldw	r3,-12(fp)
  801b78:	19000104 	addi	r4,r3,4
  801b7c:	e13ffd15 	stw	r4,-12(fp)
  801b80:	18c00017 	ldw	r3,0(r3)
  801b84:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  801b88:	e0fffe17 	ldw	r3,-8(fp)
  801b8c:	e0bfff17 	ldw	r2,-4(fp)
  801b90:	18bff51e 	bne	r3,r2,801b68 <_gp+0xffff6118>
    {
      *to++ = *from++;
    }
  }
}
  801b94:	0001883a 	nop
  801b98:	e037883a 	mov	sp,fp
  801b9c:	df000017 	ldw	fp,0(sp)
  801ba0:	dec00104 	addi	sp,sp,4
  801ba4:	f800283a 	ret

00801ba8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  801ba8:	defffe04 	addi	sp,sp,-8
  801bac:	dfc00115 	stw	ra,4(sp)
  801bb0:	df000015 	stw	fp,0(sp)
  801bb4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  801bb8:	01802034 	movhi	r6,128
  801bbc:	318e9f04 	addi	r6,r6,14972
  801bc0:	01402034 	movhi	r5,128
  801bc4:	294dd404 	addi	r5,r5,14160
  801bc8:	01002034 	movhi	r4,128
  801bcc:	210e9f04 	addi	r4,r4,14972
  801bd0:	0801b400 	call	801b40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  801bd4:	01802034 	movhi	r6,128
  801bd8:	31809104 	addi	r6,r6,580
  801bdc:	01402034 	movhi	r5,128
  801be0:	29400804 	addi	r5,r5,32
  801be4:	01002034 	movhi	r4,128
  801be8:	21000804 	addi	r4,r4,32
  801bec:	0801b400 	call	801b40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  801bf0:	01802034 	movhi	r6,128
  801bf4:	318dd404 	addi	r6,r6,14160
  801bf8:	01402034 	movhi	r5,128
  801bfc:	294d2a04 	addi	r5,r5,13480
  801c00:	01002034 	movhi	r4,128
  801c04:	210d2a04 	addi	r4,r4,13480
  801c08:	0801b400 	call	801b40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  801c0c:	0802c340 	call	802c34 <alt_dcache_flush_all>
  alt_icache_flush_all();
  801c10:	0802df00 	call	802df0 <alt_icache_flush_all>
}
  801c14:	0001883a 	nop
  801c18:	e037883a 	mov	sp,fp
  801c1c:	dfc00117 	ldw	ra,4(sp)
  801c20:	df000017 	ldw	fp,0(sp)
  801c24:	dec00204 	addi	sp,sp,8
  801c28:	f800283a 	ret

00801c2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  801c2c:	defffd04 	addi	sp,sp,-12
  801c30:	dfc00215 	stw	ra,8(sp)
  801c34:	df000115 	stw	fp,4(sp)
  801c38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  801c3c:	0009883a 	mov	r4,zero
  801c40:	0801cb00 	call	801cb0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  801c44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  801c48:	0801ce80 	call	801ce8 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  801c4c:	d0a0dd17 	ldw	r2,-31884(gp)
  801c50:	d0e0de17 	ldw	r3,-31880(gp)
  801c54:	d120df17 	ldw	r4,-31876(gp)
  801c58:	200d883a 	mov	r6,r4
  801c5c:	180b883a 	mov	r5,r3
  801c60:	1009883a 	mov	r4,r2
  801c64:	08010400 	call	801040 <main>
  801c68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  801c6c:	01000044 	movi	r4,1
  801c70:	0802b3c0 	call	802b3c <close>
  exit (result);
  801c74:	e13fff17 	ldw	r4,-4(fp)
  801c78:	08032780 	call	803278 <exit>

00801c7c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  801c7c:	defffd04 	addi	sp,sp,-12
  801c80:	dfc00215 	stw	ra,8(sp)
  801c84:	df000115 	stw	fp,4(sp)
  801c88:	df000104 	addi	fp,sp,4
  801c8c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  801c90:	d1600404 	addi	r5,gp,-32752
  801c94:	e13fff17 	ldw	r4,-4(fp)
  801c98:	0802cbc0 	call	802cbc <alt_dev_llist_insert>
}
  801c9c:	e037883a 	mov	sp,fp
  801ca0:	dfc00117 	ldw	ra,4(sp)
  801ca4:	df000017 	ldw	fp,0(sp)
  801ca8:	dec00204 	addi	sp,sp,8
  801cac:	f800283a 	ret

00801cb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  801cb0:	defffd04 	addi	sp,sp,-12
  801cb4:	dfc00215 	stw	ra,8(sp)
  801cb8:	df000115 	stw	fp,4(sp)
  801cbc:	df000104 	addi	fp,sp,4
  801cc0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  801cc4:	08031280 	call	803128 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  801cc8:	00800044 	movi	r2,1
  801ccc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  801cd0:	0001883a 	nop
  801cd4:	e037883a 	mov	sp,fp
  801cd8:	dfc00117 	ldw	ra,4(sp)
  801cdc:	df000017 	ldw	fp,0(sp)
  801ce0:	dec00204 	addi	sp,sp,8
  801ce4:	f800283a 	ret

00801ce8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  801ce8:	defffe04 	addi	sp,sp,-8
  801cec:	dfc00115 	stw	ra,4(sp)
  801cf0:	df000015 	stw	fp,0(sp)
  801cf4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_0, sgdma_0);
  801cf8:	000d883a 	mov	r6,zero
  801cfc:	000b883a 	mov	r5,zero
  801d00:	01002034 	movhi	r4,128
  801d04:	210ddb04 	addi	r4,r4,14188
  801d08:	0802a1c0 	call	802a1c <alt_avalon_sgdma_init>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_0, parallel_port_0);
  801d0c:	01002034 	movhi	r4,128
  801d10:	210de704 	addi	r4,r4,14236
  801d14:	0801c7c0 	call	801c7c <alt_dev_reg>
}
  801d18:	0001883a 	nop
  801d1c:	e037883a 	mov	sp,fp
  801d20:	dfc00117 	ldw	ra,4(sp)
  801d24:	df000017 	ldw	fp,0(sp)
  801d28:	dec00204 	addi	sp,sp,8
  801d2c:	f800283a 	ret

00801d30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  801d30:	defffe04 	addi	sp,sp,-8
  801d34:	dfc00115 	stw	ra,4(sp)
  801d38:	df000015 	stw	fp,0(sp)
  801d3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  801d40:	d0a00717 	ldw	r2,-32740(gp)
  801d44:	10000326 	beq	r2,zero,801d54 <alt_get_errno+0x24>
  801d48:	d0a00717 	ldw	r2,-32740(gp)
  801d4c:	103ee83a 	callr	r2
  801d50:	00000106 	br	801d58 <alt_get_errno+0x28>
  801d54:	d0a0e204 	addi	r2,gp,-31864
}
  801d58:	e037883a 	mov	sp,fp
  801d5c:	dfc00117 	ldw	ra,4(sp)
  801d60:	df000017 	ldw	fp,0(sp)
  801d64:	dec00204 	addi	sp,sp,8
  801d68:	f800283a 	ret

00801d6c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
  801d6c:	defffc04 	addi	sp,sp,-16
  801d70:	df000315 	stw	fp,12(sp)
  801d74:	df000304 	addi	fp,sp,12
  801d78:	e13ffe15 	stw	r4,-8(fp)
  801d7c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
  801d80:	e0bffe17 	ldw	r2,-8(fp)
  801d84:	10800317 	ldw	r2,12(r2)
  801d88:	10800037 	ldwio	r2,0(r2)
  801d8c:	1080040c 	andi	r2,r2,16
  801d90:	10000226 	beq	r2,zero,801d9c <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  801d94:	00bffc04 	movi	r2,-16
  801d98:	00003906 	br	801e80 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  801d9c:	e0bffe17 	ldw	r2,-8(fp)
  801da0:	10800317 	ldw	r2,12(r2)
  801da4:	10800404 	addi	r2,r2,16
  801da8:	e0fffe17 	ldw	r3,-8(fp)
  801dac:	18c00317 	ldw	r3,12(r3)
  801db0:	18c00404 	addi	r3,r3,16
  801db4:	19000037 	ldwio	r4,0(r3)
  801db8:	00fff7c4 	movi	r3,-33
  801dbc:	20c6703a 	and	r3,r4,r3
  801dc0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  801dc4:	e0bffe17 	ldw	r2,-8(fp)
  801dc8:	10800317 	ldw	r2,12(r2)
  801dcc:	00c03fc4 	movi	r3,255
  801dd0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
  801dd4:	e0bffe17 	ldw	r2,-8(fp)
  801dd8:	10800317 	ldw	r2,12(r2)
  801ddc:	10800804 	addi	r2,r2,32
  801de0:	e0ffff17 	ldw	r3,-4(fp)
  801de4:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
  801de8:	e0bffe17 	ldw	r2,-8(fp)
  801dec:	10800917 	ldw	r2,36(r2)
  801df0:	10001126 	beq	r2,zero,801e38 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  801df4:	e0bffe17 	ldw	r2,-8(fp)
  801df8:	10800317 	ldw	r2,12(r2)
  801dfc:	10800404 	addi	r2,r2,16
  801e00:	10800037 	ldwio	r2,0(r2)
  801e04:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
  801e08:	e0bffe17 	ldw	r2,-8(fp)
  801e0c:	10c00b17 	ldw	r3,44(r2)
  801e10:	e0bffd17 	ldw	r2,-12(fp)
  801e14:	1884b03a 	or	r2,r3,r2
  801e18:	10801814 	ori	r2,r2,96
  801e1c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  801e20:	e0bffe17 	ldw	r2,-8(fp)
  801e24:	10800317 	ldw	r2,12(r2)
  801e28:	10800404 	addi	r2,r2,16
  801e2c:	e0fffd17 	ldw	r3,-12(fp)
  801e30:	10c00035 	stwio	r3,0(r2)
  801e34:	00001106 	br	801e7c <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  801e38:	e0bffe17 	ldw	r2,-8(fp)
  801e3c:	10800317 	ldw	r2,12(r2)
  801e40:	10800404 	addi	r2,r2,16
  801e44:	10800037 	ldwio	r2,0(r2)
  801e48:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
  801e4c:	e0bffd17 	ldw	r2,-12(fp)
  801e50:	10801814 	ori	r2,r2,96
  801e54:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
  801e58:	e0fffd17 	ldw	r3,-12(fp)
  801e5c:	00bffbc4 	movi	r2,-17
  801e60:	1884703a 	and	r2,r3,r2
  801e64:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  801e68:	e0bffe17 	ldw	r2,-8(fp)
  801e6c:	10800317 	ldw	r2,12(r2)
  801e70:	10800404 	addi	r2,r2,16
  801e74:	e0fffd17 	ldw	r3,-12(fp)
  801e78:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
  801e7c:	0005883a 	mov	r2,zero
}
  801e80:	e037883a 	mov	sp,fp
  801e84:	df000017 	ldw	fp,0(sp)
  801e88:	dec00104 	addi	sp,sp,4
  801e8c:	f800283a 	ret

00801e90 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
  801e90:	defffc04 	addi	sp,sp,-16
  801e94:	df000315 	stw	fp,12(sp)
  801e98:	df000304 	addi	fp,sp,12
  801e9c:	e13ffe15 	stw	r4,-8(fp)
  801ea0:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
  801ea4:	0001883a 	nop
  801ea8:	e0bffe17 	ldw	r2,-8(fp)
  801eac:	10800317 	ldw	r2,12(r2)
  801eb0:	10800037 	ldwio	r2,0(r2)
  801eb4:	1080040c 	andi	r2,r2,16
  801eb8:	103ffb1e 	bne	r2,zero,801ea8 <_gp+0xffff6458>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  801ebc:	e0bffe17 	ldw	r2,-8(fp)
  801ec0:	10800317 	ldw	r2,12(r2)
  801ec4:	10800404 	addi	r2,r2,16
  801ec8:	e0fffe17 	ldw	r3,-8(fp)
  801ecc:	18c00317 	ldw	r3,12(r3)
  801ed0:	18c00404 	addi	r3,r3,16
  801ed4:	19000037 	ldwio	r4,0(r3)
  801ed8:	00fff7c4 	movi	r3,-33
  801edc:	20c6703a 	and	r3,r4,r3
  801ee0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  801ee4:	e0bffe17 	ldw	r2,-8(fp)
  801ee8:	10800317 	ldw	r2,12(r2)
  801eec:	00c03fc4 	movi	r3,255
  801ef0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
  801ef4:	e0bffe17 	ldw	r2,-8(fp)
  801ef8:	10800317 	ldw	r2,12(r2)
  801efc:	10800804 	addi	r2,r2,32
  801f00:	e0ffff17 	ldw	r3,-4(fp)
  801f04:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  801f08:	e0bffe17 	ldw	r2,-8(fp)
  801f0c:	10800317 	ldw	r2,12(r2)
  801f10:	10800404 	addi	r2,r2,16
  801f14:	e0fffe17 	ldw	r3,-8(fp)
  801f18:	18c00317 	ldw	r3,12(r3)
  801f1c:	18c00404 	addi	r3,r3,16
  801f20:	18c00037 	ldwio	r3,0(r3)
  801f24:	18c01814 	ori	r3,r3,96
  801f28:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
  801f2c:	0001883a 	nop
  801f30:	e0bffe17 	ldw	r2,-8(fp)
  801f34:	10800317 	ldw	r2,12(r2)
  801f38:	10800037 	ldwio	r2,0(r2)
  801f3c:	1080040c 	andi	r2,r2,16
  801f40:	103ffb1e 	bne	r2,zero,801f30 <_gp+0xffff64e0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
  801f44:	e0bffe17 	ldw	r2,-8(fp)
  801f48:	10800317 	ldw	r2,12(r2)
  801f4c:	10800404 	addi	r2,r2,16
  801f50:	e0fffe17 	ldw	r3,-8(fp)
  801f54:	18c00317 	ldw	r3,12(r3)
  801f58:	18c00404 	addi	r3,r3,16
  801f5c:	19000037 	ldwio	r4,0(r3)
  801f60:	00fff7c4 	movi	r3,-33
  801f64:	20c6703a 	and	r3,r4,r3
  801f68:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
  801f6c:	e0bffe17 	ldw	r2,-8(fp)
  801f70:	10800317 	ldw	r2,12(r2)
  801f74:	10800037 	ldwio	r2,0(r2)
  801f78:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  801f7c:	e0bffe17 	ldw	r2,-8(fp)
  801f80:	10800317 	ldw	r2,12(r2)
  801f84:	00c03fc4 	movi	r3,255
  801f88:	10c00035 	stwio	r3,0(r2)

  return status;
  801f8c:	e0bffd03 	ldbu	r2,-12(fp)
}
  801f90:	e037883a 	mov	sp,fp
  801f94:	df000017 	ldw	fp,0(sp)
  801f98:	dec00104 	addi	sp,sp,4
  801f9c:	f800283a 	ret

00801fa0 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
  801fa0:	defff404 	addi	sp,sp,-48
  801fa4:	dfc00b15 	stw	ra,44(sp)
  801fa8:	df000a15 	stw	fp,40(sp)
  801fac:	df000a04 	addi	fp,sp,40
  801fb0:	e13ffb15 	stw	r4,-20(fp)
  801fb4:	e17ffc15 	stw	r5,-16(fp)
  801fb8:	e1bffd15 	stw	r6,-12(fp)
  801fbc:	e1fffe15 	stw	r7,-8(fp)
  801fc0:	e0800217 	ldw	r2,8(fp)
  801fc4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
  801fc8:	e0bfff0b 	ldhu	r2,-4(fp)
  801fcc:	d8000415 	stw	zero,16(sp)
  801fd0:	d8000315 	stw	zero,12(sp)
  801fd4:	e0c00417 	ldw	r3,16(fp)
  801fd8:	d8c00215 	stw	r3,8(sp)
  801fdc:	e0c00317 	ldw	r3,12(fp)
  801fe0:	d8c00115 	stw	r3,4(sp)
  801fe4:	d8800015 	stw	r2,0(sp)
  801fe8:	e1fffe17 	ldw	r7,-8(fp)
  801fec:	e1bffd17 	ldw	r6,-12(fp)
  801ff0:	e17ffc17 	ldw	r5,-16(fp)
  801ff4:	e13ffb17 	ldw	r4,-20(fp)
  801ff8:	08020140 	call	802014 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
  801ffc:	0001883a 	nop
  802000:	e037883a 	mov	sp,fp
  802004:	dfc00117 	ldw	ra,4(sp)
  802008:	df000017 	ldw	fp,0(sp)
  80200c:	dec00204 	addi	sp,sp,8
  802010:	f800283a 	ret

00802014 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
  802014:	defff204 	addi	sp,sp,-56
  802018:	dfc00d15 	stw	ra,52(sp)
  80201c:	df000c15 	stw	fp,48(sp)
  802020:	df000c04 	addi	fp,sp,48
  802024:	e13ffb15 	stw	r4,-20(fp)
  802028:	e17ffc15 	stw	r5,-16(fp)
  80202c:	e1bffd15 	stw	r6,-12(fp)
  802030:	e1fffe15 	stw	r7,-8(fp)
  802034:	e0800217 	ldw	r2,8(fp)
  802038:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
  80203c:	e0bfff0b 	ldhu	r2,-4(fp)
  802040:	d8000615 	stw	zero,24(sp)
  802044:	e0c00617 	ldw	r3,24(fp)
  802048:	d8c00515 	stw	r3,20(sp)
  80204c:	e0c00517 	ldw	r3,20(fp)
  802050:	d8c00415 	stw	r3,16(sp)
  802054:	e0c00417 	ldw	r3,16(fp)
  802058:	d8c00315 	stw	r3,12(sp)
  80205c:	e0c00317 	ldw	r3,12(fp)
  802060:	d8c00215 	stw	r3,8(sp)
  802064:	d8000115 	stw	zero,4(sp)
  802068:	d8800015 	stw	r2,0(sp)
  80206c:	e1fffe17 	ldw	r7,-8(fp)
  802070:	e1bffd17 	ldw	r6,-12(fp)
  802074:	e17ffc17 	ldw	r5,-16(fp)
  802078:	e13ffb17 	ldw	r4,-20(fp)
  80207c:	08025a80 	call	8025a8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
  802080:	0001883a 	nop
  802084:	e037883a 	mov	sp,fp
  802088:	dfc00117 	ldw	ra,4(sp)
  80208c:	df000017 	ldw	fp,0(sp)
  802090:	dec00204 	addi	sp,sp,8
  802094:	f800283a 	ret

00802098 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
  802098:	defff804 	addi	sp,sp,-32
  80209c:	dfc00715 	stw	ra,28(sp)
  8020a0:	df000615 	stw	fp,24(sp)
  8020a4:	df000604 	addi	fp,sp,24
  8020a8:	e13ffc15 	stw	r4,-16(fp)
  8020ac:	e17ffd15 	stw	r5,-12(fp)
  8020b0:	e1bffe15 	stw	r6,-8(fp)
  8020b4:	3805883a 	mov	r2,r7
  8020b8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
  8020bc:	e0ffff0b 	ldhu	r3,-4(fp)
  8020c0:	d8000115 	stw	zero,4(sp)
  8020c4:	e0800217 	ldw	r2,8(fp)
  8020c8:	d8800015 	stw	r2,0(sp)
  8020cc:	180f883a 	mov	r7,r3
  8020d0:	e1bffe17 	ldw	r6,-8(fp)
  8020d4:	e17ffd17 	ldw	r5,-12(fp)
  8020d8:	e13ffc17 	ldw	r4,-16(fp)
  8020dc:	08020f80 	call	8020f8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
  8020e0:	0001883a 	nop
  8020e4:	e037883a 	mov	sp,fp
  8020e8:	dfc00117 	ldw	ra,4(sp)
  8020ec:	df000017 	ldw	fp,0(sp)
  8020f0:	dec00204 	addi	sp,sp,8
  8020f4:	f800283a 	ret

008020f8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
  8020f8:	defff304 	addi	sp,sp,-52
  8020fc:	dfc00c15 	stw	ra,48(sp)
  802100:	df000b15 	stw	fp,44(sp)
  802104:	df000b04 	addi	fp,sp,44
  802108:	e13ffc15 	stw	r4,-16(fp)
  80210c:	e17ffd15 	stw	r5,-12(fp)
  802110:	e1bffe15 	stw	r6,-8(fp)
  802114:	3805883a 	mov	r2,r7
  802118:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
  80211c:	e0bfff0b 	ldhu	r2,-4(fp)
  802120:	d8000615 	stw	zero,24(sp)
  802124:	e0c00317 	ldw	r3,12(fp)
  802128:	d8c00515 	stw	r3,20(sp)
  80212c:	d8000415 	stw	zero,16(sp)
  802130:	e0c00217 	ldw	r3,8(fp)
  802134:	d8c00315 	stw	r3,12(sp)
  802138:	d8000215 	stw	zero,8(sp)
  80213c:	d8000115 	stw	zero,4(sp)
  802140:	d8800015 	stw	r2,0(sp)
  802144:	e1fffe17 	ldw	r7,-8(fp)
  802148:	000d883a 	mov	r6,zero
  80214c:	e17ffd17 	ldw	r5,-12(fp)
  802150:	e13ffc17 	ldw	r4,-16(fp)
  802154:	08025a80 	call	8025a8 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
  802158:	0001883a 	nop
  80215c:	e037883a 	mov	sp,fp
  802160:	dfc00117 	ldw	ra,4(sp)
  802164:	df000017 	ldw	fp,0(sp)
  802168:	dec00204 	addi	sp,sp,8
  80216c:	f800283a 	ret

00802170 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
  802170:	defff404 	addi	sp,sp,-48
  802174:	dfc00b15 	stw	ra,44(sp)
  802178:	df000a15 	stw	fp,40(sp)
  80217c:	df000a04 	addi	fp,sp,40
  802180:	e13ffb15 	stw	r4,-20(fp)
  802184:	e17ffc15 	stw	r5,-16(fp)
  802188:	e1bffd15 	stw	r6,-12(fp)
  80218c:	3807883a 	mov	r3,r7
  802190:	e0800517 	ldw	r2,20(fp)
  802194:	e0fffe0d 	sth	r3,-8(fp)
  802198:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
  80219c:	e0fffe0b 	ldhu	r3,-8(fp)
  8021a0:	e0bfff03 	ldbu	r2,-4(fp)
  8021a4:	d8800415 	stw	r2,16(sp)
  8021a8:	d8000315 	stw	zero,12(sp)
  8021ac:	e0800417 	ldw	r2,16(fp)
  8021b0:	d8800215 	stw	r2,8(sp)
  8021b4:	e0800317 	ldw	r2,12(fp)
  8021b8:	d8800115 	stw	r2,4(sp)
  8021bc:	e0800217 	ldw	r2,8(fp)
  8021c0:	d8800015 	stw	r2,0(sp)
  8021c4:	180f883a 	mov	r7,r3
  8021c8:	e1bffd17 	ldw	r6,-12(fp)
  8021cc:	e17ffc17 	ldw	r5,-16(fp)
  8021d0:	e13ffb17 	ldw	r4,-20(fp)
  8021d4:	08021f00 	call	8021f0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
  8021d8:	0001883a 	nop
  8021dc:	e037883a 	mov	sp,fp
  8021e0:	dfc00117 	ldw	ra,4(sp)
  8021e4:	df000017 	ldw	fp,0(sp)
  8021e8:	dec00204 	addi	sp,sp,8
  8021ec:	f800283a 	ret

008021f0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
  8021f0:	defff204 	addi	sp,sp,-56
  8021f4:	dfc00d15 	stw	ra,52(sp)
  8021f8:	df000c15 	stw	fp,48(sp)
  8021fc:	df000c04 	addi	fp,sp,48
  802200:	e13ffb15 	stw	r4,-20(fp)
  802204:	e17ffc15 	stw	r5,-16(fp)
  802208:	e1bffd15 	stw	r6,-12(fp)
  80220c:	3807883a 	mov	r3,r7
  802210:	e0800617 	ldw	r2,24(fp)
  802214:	e0fffe0d 	sth	r3,-8(fp)
  802218:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
  80221c:	e0bffe0b 	ldhu	r2,-8(fp)
  802220:	e0ffff03 	ldbu	r3,-4(fp)
  802224:	d8c00615 	stw	r3,24(sp)
  802228:	d8000515 	stw	zero,20(sp)
  80222c:	e0c00517 	ldw	r3,20(fp)
  802230:	d8c00415 	stw	r3,16(sp)
  802234:	e0c00317 	ldw	r3,12(fp)
  802238:	d8c00315 	stw	r3,12(sp)
  80223c:	e0c00217 	ldw	r3,8(fp)
  802240:	d8c00215 	stw	r3,8(sp)
  802244:	e0c00417 	ldw	r3,16(fp)
  802248:	d8c00115 	stw	r3,4(sp)
  80224c:	d8800015 	stw	r2,0(sp)
  802250:	000f883a 	mov	r7,zero
  802254:	e1bffd17 	ldw	r6,-12(fp)
  802258:	e17ffc17 	ldw	r5,-16(fp)
  80225c:	e13ffb17 	ldw	r4,-20(fp)
  802260:	08025a80 	call	8025a8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
  802264:	0001883a 	nop
  802268:	e037883a 	mov	sp,fp
  80226c:	dfc00117 	ldw	ra,4(sp)
  802270:	df000017 	ldw	fp,0(sp)
  802274:	dec00204 	addi	sp,sp,8
  802278:	f800283a 	ret

0080227c <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  80227c:	defffb04 	addi	sp,sp,-20
  802280:	df000415 	stw	fp,16(sp)
  802284:	df000404 	addi	fp,sp,16
  802288:	e13ffc15 	stw	r4,-16(fp)
  80228c:	e17ffd15 	stw	r5,-12(fp)
  802290:	e1bffe15 	stw	r6,-8(fp)
  802294:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
  802298:	e0bffc17 	ldw	r2,-16(fp)
  80229c:	e0fffd17 	ldw	r3,-12(fp)
  8022a0:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
  8022a4:	e0bffc17 	ldw	r2,-16(fp)
  8022a8:	e0ffff17 	ldw	r3,-4(fp)
  8022ac:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
  8022b0:	e0bffc17 	ldw	r2,-16(fp)
  8022b4:	e0fffe17 	ldw	r3,-8(fp)
  8022b8:	10c00b15 	stw	r3,44(r2)
}
  8022bc:	0001883a 	nop
  8022c0:	e037883a 	mov	sp,fp
  8022c4:	df000017 	ldw	fp,0(sp)
  8022c8:	dec00104 	addi	sp,sp,4
  8022cc:	f800283a 	ret

008022d0 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  8022d0:	defffd04 	addi	sp,sp,-12
  8022d4:	df000215 	stw	fp,8(sp)
  8022d8:	df000204 	addi	fp,sp,8
  8022dc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  8022e0:	e0bfff17 	ldw	r2,-4(fp)
  8022e4:	10800317 	ldw	r2,12(r2)
  8022e8:	10800404 	addi	r2,r2,16
  8022ec:	10800037 	ldwio	r2,0(r2)
  8022f0:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  8022f4:	e0bffe17 	ldw	r2,-8(fp)
  8022f8:	10800814 	ori	r2,r2,32
  8022fc:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  802300:	e0bfff17 	ldw	r2,-4(fp)
  802304:	10800317 	ldw	r2,12(r2)
  802308:	10800404 	addi	r2,r2,16
  80230c:	e0fffe17 	ldw	r3,-8(fp)
  802310:	10c00035 	stwio	r3,0(r2)
}
  802314:	0001883a 	nop
  802318:	e037883a 	mov	sp,fp
  80231c:	df000017 	ldw	fp,0(sp)
  802320:	dec00104 	addi	sp,sp,4
  802324:	f800283a 	ret

00802328 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  802328:	defffd04 	addi	sp,sp,-12
  80232c:	df000215 	stw	fp,8(sp)
  802330:	df000204 	addi	fp,sp,8
  802334:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  802338:	e0bfff17 	ldw	r2,-4(fp)
  80233c:	10800317 	ldw	r2,12(r2)
  802340:	10800404 	addi	r2,r2,16
  802344:	10800037 	ldwio	r2,0(r2)
  802348:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  80234c:	e0fffe17 	ldw	r3,-8(fp)
  802350:	00bff7c4 	movi	r2,-33
  802354:	1884703a 	and	r2,r3,r2
  802358:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  80235c:	e0bfff17 	ldw	r2,-4(fp)
  802360:	10800317 	ldw	r2,12(r2)
  802364:	10800404 	addi	r2,r2,16
  802368:	e0fffe17 	ldw	r3,-8(fp)
  80236c:	10c00035 	stwio	r3,0(r2)
}
  802370:	0001883a 	nop
  802374:	e037883a 	mov	sp,fp
  802378:	df000017 	ldw	fp,0(sp)
  80237c:	dec00104 	addi	sp,sp,4
  802380:	f800283a 	ret

00802384 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  802384:	defffe04 	addi	sp,sp,-8
  802388:	df000115 	stw	fp,4(sp)
  80238c:	df000104 	addi	fp,sp,4
  802390:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
  802394:	e0bfff17 	ldw	r2,-4(fp)
  802398:	10800784 	addi	r2,r2,30
  80239c:	10800023 	ldbuio	r2,0(r2)
  8023a0:	10803fcc 	andi	r2,r2,255
  8023a4:	10801fcc 	andi	r2,r2,127
  8023a8:	10000226 	beq	r2,zero,8023b4 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  8023ac:	00bffec4 	movi	r2,-5
  8023b0:	00000906 	br	8023d8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
  8023b4:	e0bfff17 	ldw	r2,-4(fp)
  8023b8:	108007c4 	addi	r2,r2,31
  8023bc:	10800023 	ldbuio	r2,0(r2)
  8023c0:	10803fcc 	andi	r2,r2,255
  8023c4:	1080200c 	andi	r2,r2,128
  8023c8:	10000226 	beq	r2,zero,8023d4 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  8023cc:	00bfe244 	movi	r2,-119
  8023d0:	00000106 	br	8023d8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
  8023d4:	0005883a 	mov	r2,zero
}
  8023d8:	e037883a 	mov	sp,fp
  8023dc:	df000017 	ldw	fp,0(sp)
  8023e0:	dec00104 	addi	sp,sp,4
  8023e4:	f800283a 	ret

008023e8 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
  8023e8:	defffc04 	addi	sp,sp,-16
  8023ec:	dfc00315 	stw	ra,12(sp)
  8023f0:	df000215 	stw	fp,8(sp)
  8023f4:	df000204 	addi	fp,sp,8
  8023f8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
  8023fc:	d1600004 	addi	r5,gp,-32768
  802400:	e13fff17 	ldw	r4,-4(fp)
  802404:	0802d600 	call	802d60 <alt_find_dev>
  802408:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
  80240c:	e0bffe17 	ldw	r2,-8(fp)
  802410:	1000041e 	bne	r2,zero,802424 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
  802414:	0801d300 	call	801d30 <alt_get_errno>
  802418:	1007883a 	mov	r3,r2
  80241c:	008004c4 	movi	r2,19
  802420:	18800015 	stw	r2,0(r3)
  }

  return dev;
  802424:	e0bffe17 	ldw	r2,-8(fp)
}
  802428:	e037883a 	mov	sp,fp
  80242c:	dfc00117 	ldw	ra,4(sp)
  802430:	df000017 	ldw	fp,0(sp)
  802434:	dec00204 	addi	sp,sp,8
  802438:	f800283a 	ret

0080243c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
  80243c:	defff104 	addi	sp,sp,-60
  802440:	dfc00e15 	stw	ra,56(sp)
  802444:	df000d15 	stw	fp,52(sp)
  802448:	df000d04 	addi	fp,sp,52
  80244c:	e13ffa15 	stw	r4,-24(fp)
  802450:	e17ffb15 	stw	r5,-20(fp)
  802454:	e1bffc15 	stw	r6,-16(fp)
  802458:	e1fffd15 	stw	r7,-12(fp)
  80245c:	e0c00217 	ldw	r3,8(fp)
  802460:	e0800617 	ldw	r2,24(fp)
  802464:	e0fffe0d 	sth	r3,-8(fp)
  802468:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
  80246c:	e0bffe0b 	ldhu	r2,-8(fp)
  802470:	e0ffff03 	ldbu	r3,-4(fp)
  802474:	d8c00615 	stw	r3,24(sp)
  802478:	d8000515 	stw	zero,20(sp)
  80247c:	d8000415 	stw	zero,16(sp)
  802480:	e0c00517 	ldw	r3,20(fp)
  802484:	d8c00315 	stw	r3,12(sp)
  802488:	e0c00417 	ldw	r3,16(fp)
  80248c:	d8c00215 	stw	r3,8(sp)
  802490:	e0c00317 	ldw	r3,12(fp)
  802494:	d8c00115 	stw	r3,4(sp)
  802498:	d8800015 	stw	r2,0(sp)
  80249c:	e1fffd17 	ldw	r7,-12(fp)
  8024a0:	e1bffc17 	ldw	r6,-16(fp)
  8024a4:	e17ffb17 	ldw	r5,-20(fp)
  8024a8:	e13ffa17 	ldw	r4,-24(fp)
  8024ac:	08025a80 	call	8025a8 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
  8024b0:	0001883a 	nop
  8024b4:	e037883a 	mov	sp,fp
  8024b8:	dfc00117 	ldw	ra,4(sp)
  8024bc:	df000017 	ldw	fp,0(sp)
  8024c0:	dec00204 	addi	sp,sp,8
  8024c4:	f800283a 	ret

008024c8 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  8024c8:	defffc04 	addi	sp,sp,-16
  8024cc:	df000315 	stw	fp,12(sp)
  8024d0:	df000304 	addi	fp,sp,12
  8024d4:	e13ffe15 	stw	r4,-8(fp)
  8024d8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  8024dc:	e0bffe17 	ldw	r2,-8(fp)
  8024e0:	10800317 	ldw	r2,12(r2)
  8024e4:	10800404 	addi	r2,r2,16
  8024e8:	10800037 	ldwio	r2,0(r2)
  8024ec:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  8024f0:	e0fffd17 	ldw	r3,-12(fp)
  8024f4:	00a00434 	movhi	r2,32784
  8024f8:	10bfffc4 	addi	r2,r2,-1
  8024fc:	1884703a 	and	r2,r3,r2
  802500:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
  802504:	e0bfff17 	ldw	r2,-4(fp)
  802508:	1004953a 	slli	r2,r2,20
  80250c:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
  802510:	e0bffd17 	ldw	r2,-12(fp)
  802514:	1884b03a 	or	r2,r3,r2
  802518:	10800134 	orhi	r2,r2,4
  80251c:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  802520:	e0bffe17 	ldw	r2,-8(fp)
  802524:	10800317 	ldw	r2,12(r2)
  802528:	10800404 	addi	r2,r2,16
  80252c:	e0fffd17 	ldw	r3,-12(fp)
  802530:	10c00035 	stwio	r3,0(r2)
  
  return;
  802534:	0001883a 	nop
}
  802538:	e037883a 	mov	sp,fp
  80253c:	df000017 	ldw	fp,0(sp)
  802540:	dec00104 	addi	sp,sp,4
  802544:	f800283a 	ret

00802548 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  802548:	defffd04 	addi	sp,sp,-12
  80254c:	df000215 	stw	fp,8(sp)
  802550:	df000204 	addi	fp,sp,8
  802554:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  802558:	e0bfff17 	ldw	r2,-4(fp)
  80255c:	10800317 	ldw	r2,12(r2)
  802560:	10800404 	addi	r2,r2,16
  802564:	10800037 	ldwio	r2,0(r2)
  802568:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
  80256c:	e0fffe17 	ldw	r3,-8(fp)
  802570:	00bfff34 	movhi	r2,65532
  802574:	10bfffc4 	addi	r2,r2,-1
  802578:	1884703a 	and	r2,r3,r2
  80257c:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  802580:	e0bfff17 	ldw	r2,-4(fp)
  802584:	10800317 	ldw	r2,12(r2)
  802588:	10800404 	addi	r2,r2,16
  80258c:	e0fffe17 	ldw	r3,-8(fp)
  802590:	10c00035 	stwio	r3,0(r2)
  
  return;
  802594:	0001883a 	nop
}
  802598:	e037883a 	mov	sp,fp
  80259c:	df000017 	ldw	fp,0(sp)
  8025a0:	dec00104 	addi	sp,sp,4
  8025a4:	f800283a 	ret

008025a8 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
  8025a8:	defff804 	addi	sp,sp,-32
  8025ac:	dfc00715 	stw	ra,28(sp)
  8025b0:	df000615 	stw	fp,24(sp)
  8025b4:	df000604 	addi	fp,sp,24
  8025b8:	e13ffa15 	stw	r4,-24(fp)
  8025bc:	e17ffb15 	stw	r5,-20(fp)
  8025c0:	e1bffc15 	stw	r6,-16(fp)
  8025c4:	e1fffd15 	stw	r7,-12(fp)
  8025c8:	e0c00217 	ldw	r3,8(fp)
  8025cc:	e0800817 	ldw	r2,32(fp)
  8025d0:	e0fffe0d 	sth	r3,-8(fp)
  8025d4:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
  8025d8:	e0bffb17 	ldw	r2,-20(fp)
  8025dc:	108007c4 	addi	r2,r2,31
  8025e0:	e0fffb17 	ldw	r3,-20(fp)
  8025e4:	18c007c3 	ldbu	r3,31(r3)
  8025e8:	19003fcc 	andi	r4,r3,255
  8025ec:	00ffdfc4 	movi	r3,-129
  8025f0:	20c6703a 	and	r3,r4,r3
  8025f4:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  8025f8:	e0bffa17 	ldw	r2,-24(fp)
  8025fc:	e0fffc17 	ldw	r3,-16(fp)
  802600:	19403fcc 	andi	r5,r3,255
  802604:	10c00003 	ldbu	r3,0(r2)
  802608:	1806703a 	and	r3,r3,zero
  80260c:	1809883a 	mov	r4,r3
  802610:	2807883a 	mov	r3,r5
  802614:	20c6b03a 	or	r3,r4,r3
  802618:	10c00005 	stb	r3,0(r2)
  80261c:	e0fffc17 	ldw	r3,-16(fp)
  802620:	1806d23a 	srli	r3,r3,8
  802624:	19403fcc 	andi	r5,r3,255
  802628:	10c00043 	ldbu	r3,1(r2)
  80262c:	1806703a 	and	r3,r3,zero
  802630:	1809883a 	mov	r4,r3
  802634:	2807883a 	mov	r3,r5
  802638:	20c6b03a 	or	r3,r4,r3
  80263c:	10c00045 	stb	r3,1(r2)
  802640:	e0fffc17 	ldw	r3,-16(fp)
  802644:	1806d43a 	srli	r3,r3,16
  802648:	19403fcc 	andi	r5,r3,255
  80264c:	10c00083 	ldbu	r3,2(r2)
  802650:	1806703a 	and	r3,r3,zero
  802654:	1809883a 	mov	r4,r3
  802658:	2807883a 	mov	r3,r5
  80265c:	20c6b03a 	or	r3,r4,r3
  802660:	10c00085 	stb	r3,2(r2)
  802664:	e0fffc17 	ldw	r3,-16(fp)
  802668:	180ad63a 	srli	r5,r3,24
  80266c:	10c000c3 	ldbu	r3,3(r2)
  802670:	1806703a 	and	r3,r3,zero
  802674:	1809883a 	mov	r4,r3
  802678:	2807883a 	mov	r3,r5
  80267c:	20c6b03a 	or	r3,r4,r3
  802680:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
  802684:	e0bffa17 	ldw	r2,-24(fp)
  802688:	e0fffd17 	ldw	r3,-12(fp)
  80268c:	19403fcc 	andi	r5,r3,255
  802690:	10c00203 	ldbu	r3,8(r2)
  802694:	1806703a 	and	r3,r3,zero
  802698:	1809883a 	mov	r4,r3
  80269c:	2807883a 	mov	r3,r5
  8026a0:	20c6b03a 	or	r3,r4,r3
  8026a4:	10c00205 	stb	r3,8(r2)
  8026a8:	e0fffd17 	ldw	r3,-12(fp)
  8026ac:	1806d23a 	srli	r3,r3,8
  8026b0:	19403fcc 	andi	r5,r3,255
  8026b4:	10c00243 	ldbu	r3,9(r2)
  8026b8:	1806703a 	and	r3,r3,zero
  8026bc:	1809883a 	mov	r4,r3
  8026c0:	2807883a 	mov	r3,r5
  8026c4:	20c6b03a 	or	r3,r4,r3
  8026c8:	10c00245 	stb	r3,9(r2)
  8026cc:	e0fffd17 	ldw	r3,-12(fp)
  8026d0:	1806d43a 	srli	r3,r3,16
  8026d4:	19403fcc 	andi	r5,r3,255
  8026d8:	10c00283 	ldbu	r3,10(r2)
  8026dc:	1806703a 	and	r3,r3,zero
  8026e0:	1809883a 	mov	r4,r3
  8026e4:	2807883a 	mov	r3,r5
  8026e8:	20c6b03a 	or	r3,r4,r3
  8026ec:	10c00285 	stb	r3,10(r2)
  8026f0:	e0fffd17 	ldw	r3,-12(fp)
  8026f4:	180ad63a 	srli	r5,r3,24
  8026f8:	10c002c3 	ldbu	r3,11(r2)
  8026fc:	1806703a 	and	r3,r3,zero
  802700:	1809883a 	mov	r4,r3
  802704:	2807883a 	mov	r3,r5
  802708:	20c6b03a 	or	r3,r4,r3
  80270c:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
  802710:	e0bffa17 	ldw	r2,-24(fp)
  802714:	e0fffb17 	ldw	r3,-20(fp)
  802718:	19403fcc 	andi	r5,r3,255
  80271c:	10c00403 	ldbu	r3,16(r2)
  802720:	1806703a 	and	r3,r3,zero
  802724:	1809883a 	mov	r4,r3
  802728:	2807883a 	mov	r3,r5
  80272c:	20c6b03a 	or	r3,r4,r3
  802730:	10c00405 	stb	r3,16(r2)
  802734:	e0fffb17 	ldw	r3,-20(fp)
  802738:	1806d23a 	srli	r3,r3,8
  80273c:	19403fcc 	andi	r5,r3,255
  802740:	10c00443 	ldbu	r3,17(r2)
  802744:	1806703a 	and	r3,r3,zero
  802748:	1809883a 	mov	r4,r3
  80274c:	2807883a 	mov	r3,r5
  802750:	20c6b03a 	or	r3,r4,r3
  802754:	10c00445 	stb	r3,17(r2)
  802758:	e0fffb17 	ldw	r3,-20(fp)
  80275c:	1806d43a 	srli	r3,r3,16
  802760:	19403fcc 	andi	r5,r3,255
  802764:	10c00483 	ldbu	r3,18(r2)
  802768:	1806703a 	and	r3,r3,zero
  80276c:	1809883a 	mov	r4,r3
  802770:	2807883a 	mov	r3,r5
  802774:	20c6b03a 	or	r3,r4,r3
  802778:	10c00485 	stb	r3,18(r2)
  80277c:	e0fffb17 	ldw	r3,-20(fp)
  802780:	180ad63a 	srli	r5,r3,24
  802784:	10c004c3 	ldbu	r3,19(r2)
  802788:	1806703a 	and	r3,r3,zero
  80278c:	1809883a 	mov	r4,r3
  802790:	2807883a 	mov	r3,r5
  802794:	20c6b03a 	or	r3,r4,r3
  802798:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
  80279c:	e0bffa17 	ldw	r2,-24(fp)
  8027a0:	10c00103 	ldbu	r3,4(r2)
  8027a4:	1806703a 	and	r3,r3,zero
  8027a8:	10c00105 	stb	r3,4(r2)
  8027ac:	10c00143 	ldbu	r3,5(r2)
  8027b0:	1806703a 	and	r3,r3,zero
  8027b4:	10c00145 	stb	r3,5(r2)
  8027b8:	10c00183 	ldbu	r3,6(r2)
  8027bc:	1806703a 	and	r3,r3,zero
  8027c0:	10c00185 	stb	r3,6(r2)
  8027c4:	10c001c3 	ldbu	r3,7(r2)
  8027c8:	1806703a 	and	r3,r3,zero
  8027cc:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
  8027d0:	e0bffa17 	ldw	r2,-24(fp)
  8027d4:	10c00303 	ldbu	r3,12(r2)
  8027d8:	1806703a 	and	r3,r3,zero
  8027dc:	10c00305 	stb	r3,12(r2)
  8027e0:	10c00343 	ldbu	r3,13(r2)
  8027e4:	1806703a 	and	r3,r3,zero
  8027e8:	10c00345 	stb	r3,13(r2)
  8027ec:	10c00383 	ldbu	r3,14(r2)
  8027f0:	1806703a 	and	r3,r3,zero
  8027f4:	10c00385 	stb	r3,14(r2)
  8027f8:	10c003c3 	ldbu	r3,15(r2)
  8027fc:	1806703a 	and	r3,r3,zero
  802800:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
  802804:	e0bffa17 	ldw	r2,-24(fp)
  802808:	10c00503 	ldbu	r3,20(r2)
  80280c:	1806703a 	and	r3,r3,zero
  802810:	10c00505 	stb	r3,20(r2)
  802814:	10c00543 	ldbu	r3,21(r2)
  802818:	1806703a 	and	r3,r3,zero
  80281c:	10c00545 	stb	r3,21(r2)
  802820:	10c00583 	ldbu	r3,22(r2)
  802824:	1806703a 	and	r3,r3,zero
  802828:	10c00585 	stb	r3,22(r2)
  80282c:	10c005c3 	ldbu	r3,23(r2)
  802830:	1806703a 	and	r3,r3,zero
  802834:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
  802838:	e0bffa17 	ldw	r2,-24(fp)
  80283c:	e0fffe17 	ldw	r3,-8(fp)
  802840:	19403fcc 	andi	r5,r3,255
  802844:	10c00603 	ldbu	r3,24(r2)
  802848:	1806703a 	and	r3,r3,zero
  80284c:	1809883a 	mov	r4,r3
  802850:	2807883a 	mov	r3,r5
  802854:	20c6b03a 	or	r3,r4,r3
  802858:	10c00605 	stb	r3,24(r2)
  80285c:	e0fffe17 	ldw	r3,-8(fp)
  802860:	1806d23a 	srli	r3,r3,8
  802864:	19403fcc 	andi	r5,r3,255
  802868:	10c00643 	ldbu	r3,25(r2)
  80286c:	1806703a 	and	r3,r3,zero
  802870:	1809883a 	mov	r4,r3
  802874:	2807883a 	mov	r3,r5
  802878:	20c6b03a 	or	r3,r4,r3
  80287c:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
  802880:	e0bffa17 	ldw	r2,-24(fp)
  802884:	10c00703 	ldbu	r3,28(r2)
  802888:	1806703a 	and	r3,r3,zero
  80288c:	10c00705 	stb	r3,28(r2)
  802890:	10c00743 	ldbu	r3,29(r2)
  802894:	1806703a 	and	r3,r3,zero
  802898:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
  80289c:	e0bffa17 	ldw	r2,-24(fp)
  8028a0:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
  8028a4:	e0800617 	ldw	r2,24(fp)
  8028a8:	1007883a 	mov	r3,r2
  8028ac:	e0bffa17 	ldw	r2,-24(fp)
  8028b0:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
  8028b4:	e0800717 	ldw	r2,28(fp)
  8028b8:	1007883a 	mov	r3,r2
  8028bc:	e0bffa17 	ldw	r2,-24(fp)
  8028c0:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  8028c4:	e0800317 	ldw	r2,12(fp)
  8028c8:	10000226 	beq	r2,zero,8028d4 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
  8028cc:	00bfe044 	movi	r2,-127
  8028d0:	00000106 	br	8028d8 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
  8028d4:	00bfe004 	movi	r2,-128
  8028d8:	e0c00417 	ldw	r3,16(fp)
  8028dc:	18000226 	beq	r3,zero,8028e8 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
  8028e0:	00c00084 	movi	r3,2
  8028e4:	00000106 	br	8028ec <alt_avalon_sgdma_construct_descriptor_burst+0x344>
  8028e8:	0007883a 	mov	r3,zero
  8028ec:	10c4b03a 	or	r2,r2,r3
  8028f0:	1007883a 	mov	r3,r2
  8028f4:	e0800517 	ldw	r2,20(fp)
  8028f8:	10000226 	beq	r2,zero,802904 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
  8028fc:	00800104 	movi	r2,4
  802900:	00000106 	br	802908 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
  802904:	0005883a 	mov	r2,zero
  802908:	1884b03a 	or	r2,r3,r2
  80290c:	1007883a 	mov	r3,r2
  802910:	e0bfff03 	ldbu	r2,-4(fp)
  802914:	10000426 	beq	r2,zero,802928 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
  802918:	e0bfff03 	ldbu	r2,-4(fp)
  80291c:	108003cc 	andi	r2,r2,15
  802920:	100490fa 	slli	r2,r2,3
  802924:	00000106 	br	80292c <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  802928:	0005883a 	mov	r2,zero
  80292c:	1884b03a 	or	r2,r3,r2
  802930:	1007883a 	mov	r3,r2
  802934:	e0bffa17 	ldw	r2,-24(fp)
  802938:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
  80293c:	01400804 	movi	r5,32
  802940:	e13ffa17 	ldw	r4,-24(fp)
  802944:	0802c0c0 	call	802c0c <alt_dcache_flush>
}
  802948:	0001883a 	nop
  80294c:	e037883a 	mov	sp,fp
  802950:	dfc00117 	ldw	ra,4(sp)
  802954:	df000017 	ldw	fp,0(sp)
  802958:	dec00204 	addi	sp,sp,8
  80295c:	f800283a 	ret

00802960 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
  802960:	defff904 	addi	sp,sp,-28
  802964:	dfc00615 	stw	ra,24(sp)
  802968:	df000515 	stw	fp,20(sp)
  80296c:	df000504 	addi	fp,sp,20
  802970:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
  802974:	e0bfff17 	ldw	r2,-4(fp)
  802978:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
  80297c:	e0bffb17 	ldw	r2,-20(fp)
  802980:	10800317 	ldw	r2,12(r2)
  802984:	10800404 	addi	r2,r2,16
  802988:	e0fffb17 	ldw	r3,-20(fp)
  80298c:	18c00317 	ldw	r3,12(r3)
  802990:	18c00404 	addi	r3,r3,16
  802994:	18c00037 	ldwio	r3,0(r3)
  802998:	18e00034 	orhi	r3,r3,32768
  80299c:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  8029a0:	e0bffb17 	ldw	r2,-20(fp)
  8029a4:	10800317 	ldw	r2,12(r2)
  8029a8:	10800404 	addi	r2,r2,16
  8029ac:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
  8029b0:	e0bffb17 	ldw	r2,-20(fp)
  8029b4:	10800917 	ldw	r2,36(r2)
  8029b8:	10001226 	beq	r2,zero,802a04 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8029bc:	0005303a 	rdctl	r2,status
  8029c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8029c4:	e0fffd17 	ldw	r3,-12(fp)
  8029c8:	00bfff84 	movi	r2,-2
  8029cc:	1884703a 	and	r2,r3,r2
  8029d0:	1001703a 	wrctl	status,r2
  
  return context;
  8029d4:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
  8029d8:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
  8029dc:	e0bffb17 	ldw	r2,-20(fp)
  8029e0:	10800917 	ldw	r2,36(r2)
  8029e4:	e0fffb17 	ldw	r3,-20(fp)
  8029e8:	18c00a17 	ldw	r3,40(r3)
  8029ec:	1809883a 	mov	r4,r3
  8029f0:	103ee83a 	callr	r2
  8029f4:	e0bffc17 	ldw	r2,-16(fp)
  8029f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8029fc:	e0bffe17 	ldw	r2,-8(fp)
  802a00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
  802a04:	0001883a 	nop
  802a08:	e037883a 	mov	sp,fp
  802a0c:	dfc00117 	ldw	ra,4(sp)
  802a10:	df000017 	ldw	fp,0(sp)
  802a14:	dec00204 	addi	sp,sp,8
  802a18:	f800283a 	ret

00802a1c <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
  802a1c:	defffa04 	addi	sp,sp,-24
  802a20:	dfc00515 	stw	ra,20(sp)
  802a24:	df000415 	stw	fp,16(sp)
  802a28:	df000404 	addi	fp,sp,16
  802a2c:	e13ffd15 	stw	r4,-12(fp)
  802a30:	e17ffe15 	stw	r5,-8(fp)
  802a34:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  802a38:	e0bffd17 	ldw	r2,-12(fp)
  802a3c:	10800317 	ldw	r2,12(r2)
  802a40:	10800404 	addi	r2,r2,16
  802a44:	00c00074 	movhi	r3,1
  802a48:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  802a4c:	e0bffd17 	ldw	r2,-12(fp)
  802a50:	10800317 	ldw	r2,12(r2)
  802a54:	10800404 	addi	r2,r2,16
  802a58:	00c00074 	movhi	r3,1
  802a5c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
  802a60:	e0bffd17 	ldw	r2,-12(fp)
  802a64:	10800317 	ldw	r2,12(r2)
  802a68:	10800404 	addi	r2,r2,16
  802a6c:	0007883a 	mov	r3,zero
  802a70:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  802a74:	e0bffd17 	ldw	r2,-12(fp)
  802a78:	10800317 	ldw	r2,12(r2)
  802a7c:	00c03fc4 	movi	r3,255
  802a80:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
  802a84:	d1600004 	addi	r5,gp,-32768
  802a88:	e13ffd17 	ldw	r4,-12(fp)
  802a8c:	0802cbc0 	call	802cbc <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
  802a90:	d8000015 	stw	zero,0(sp)
  802a94:	e1fffd17 	ldw	r7,-12(fp)
  802a98:	01802034 	movhi	r6,128
  802a9c:	318a5804 	addi	r6,r6,10592
  802aa0:	e17fff17 	ldw	r5,-4(fp)
  802aa4:	e13ffe17 	ldw	r4,-8(fp)
  802aa8:	0802e240 	call	802e24 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
  802aac:	0001883a 	nop
  802ab0:	e037883a 	mov	sp,fp
  802ab4:	dfc00117 	ldw	ra,4(sp)
  802ab8:	df000017 	ldw	fp,0(sp)
  802abc:	dec00204 	addi	sp,sp,8
  802ac0:	f800283a 	ret

00802ac4 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
  802ac4:	defffc04 	addi	sp,sp,-16
  802ac8:	dfc00315 	stw	ra,12(sp)
  802acc:	df000215 	stw	fp,8(sp)
  802ad0:	df000204 	addi	fp,sp,8
  802ad4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
  802ad8:	d1600404 	addi	r5,gp,-32752
  802adc:	e13fff17 	ldw	r4,-4(fp)
  802ae0:	0802d600 	call	802d60 <alt_find_dev>
  802ae4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  802ae8:	e0bffe17 	ldw	r2,-8(fp)
}
  802aec:	e037883a 	mov	sp,fp
  802af0:	dfc00117 	ldw	ra,4(sp)
  802af4:	df000017 	ldw	fp,0(sp)
  802af8:	dec00204 	addi	sp,sp,8
  802afc:	f800283a 	ret

00802b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802b00:	defffe04 	addi	sp,sp,-8
  802b04:	dfc00115 	stw	ra,4(sp)
  802b08:	df000015 	stw	fp,0(sp)
  802b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802b10:	d0a00717 	ldw	r2,-32740(gp)
  802b14:	10000326 	beq	r2,zero,802b24 <alt_get_errno+0x24>
  802b18:	d0a00717 	ldw	r2,-32740(gp)
  802b1c:	103ee83a 	callr	r2
  802b20:	00000106 	br	802b28 <alt_get_errno+0x28>
  802b24:	d0a0e204 	addi	r2,gp,-31864
}
  802b28:	e037883a 	mov	sp,fp
  802b2c:	dfc00117 	ldw	ra,4(sp)
  802b30:	df000017 	ldw	fp,0(sp)
  802b34:	dec00204 	addi	sp,sp,8
  802b38:	f800283a 	ret

00802b3c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802b3c:	defffb04 	addi	sp,sp,-20
  802b40:	dfc00415 	stw	ra,16(sp)
  802b44:	df000315 	stw	fp,12(sp)
  802b48:	df000304 	addi	fp,sp,12
  802b4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802b50:	e0bfff17 	ldw	r2,-4(fp)
  802b54:	10000616 	blt	r2,zero,802b70 <close+0x34>
  802b58:	e0bfff17 	ldw	r2,-4(fp)
  802b5c:	10c00324 	muli	r3,r2,12
  802b60:	00802034 	movhi	r2,128
  802b64:	108dfc04 	addi	r2,r2,14320
  802b68:	1885883a 	add	r2,r3,r2
  802b6c:	00000106 	br	802b74 <close+0x38>
  802b70:	0005883a 	mov	r2,zero
  802b74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802b78:	e0bffd17 	ldw	r2,-12(fp)
  802b7c:	10001926 	beq	r2,zero,802be4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802b80:	e0bffd17 	ldw	r2,-12(fp)
  802b84:	10800017 	ldw	r2,0(r2)
  802b88:	10800417 	ldw	r2,16(r2)
  802b8c:	10000626 	beq	r2,zero,802ba8 <close+0x6c>
  802b90:	e0bffd17 	ldw	r2,-12(fp)
  802b94:	10800017 	ldw	r2,0(r2)
  802b98:	10800417 	ldw	r2,16(r2)
  802b9c:	e13ffd17 	ldw	r4,-12(fp)
  802ba0:	103ee83a 	callr	r2
  802ba4:	00000106 	br	802bac <close+0x70>
  802ba8:	0005883a 	mov	r2,zero
  802bac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802bb0:	e13fff17 	ldw	r4,-4(fp)
  802bb4:	08030c40 	call	8030c4 <alt_release_fd>
    if (rval < 0)
  802bb8:	e0bffe17 	ldw	r2,-8(fp)
  802bbc:	1000070e 	bge	r2,zero,802bdc <close+0xa0>
    {
      ALT_ERRNO = -rval;
  802bc0:	0802b000 	call	802b00 <alt_get_errno>
  802bc4:	1007883a 	mov	r3,r2
  802bc8:	e0bffe17 	ldw	r2,-8(fp)
  802bcc:	0085c83a 	sub	r2,zero,r2
  802bd0:	18800015 	stw	r2,0(r3)
      return -1;
  802bd4:	00bfffc4 	movi	r2,-1
  802bd8:	00000706 	br	802bf8 <close+0xbc>
    }
    return 0;
  802bdc:	0005883a 	mov	r2,zero
  802be0:	00000506 	br	802bf8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802be4:	0802b000 	call	802b00 <alt_get_errno>
  802be8:	1007883a 	mov	r3,r2
  802bec:	00801444 	movi	r2,81
  802bf0:	18800015 	stw	r2,0(r3)
    return -1;
  802bf4:	00bfffc4 	movi	r2,-1
  }
}
  802bf8:	e037883a 	mov	sp,fp
  802bfc:	dfc00117 	ldw	ra,4(sp)
  802c00:	df000017 	ldw	fp,0(sp)
  802c04:	dec00204 	addi	sp,sp,8
  802c08:	f800283a 	ret

00802c0c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  802c0c:	defffd04 	addi	sp,sp,-12
  802c10:	df000215 	stw	fp,8(sp)
  802c14:	df000204 	addi	fp,sp,8
  802c18:	e13ffe15 	stw	r4,-8(fp)
  802c1c:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  802c20:	0001883a 	nop
  802c24:	e037883a 	mov	sp,fp
  802c28:	df000017 	ldw	fp,0(sp)
  802c2c:	dec00104 	addi	sp,sp,4
  802c30:	f800283a 	ret

00802c34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  802c34:	deffff04 	addi	sp,sp,-4
  802c38:	df000015 	stw	fp,0(sp)
  802c3c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  802c40:	0001883a 	nop
  802c44:	e037883a 	mov	sp,fp
  802c48:	df000017 	ldw	fp,0(sp)
  802c4c:	dec00104 	addi	sp,sp,4
  802c50:	f800283a 	ret

00802c54 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802c54:	defffc04 	addi	sp,sp,-16
  802c58:	df000315 	stw	fp,12(sp)
  802c5c:	df000304 	addi	fp,sp,12
  802c60:	e13ffd15 	stw	r4,-12(fp)
  802c64:	e17ffe15 	stw	r5,-8(fp)
  802c68:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802c6c:	e0bfff17 	ldw	r2,-4(fp)
}
  802c70:	e037883a 	mov	sp,fp
  802c74:	df000017 	ldw	fp,0(sp)
  802c78:	dec00104 	addi	sp,sp,4
  802c7c:	f800283a 	ret

00802c80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802c80:	defffe04 	addi	sp,sp,-8
  802c84:	dfc00115 	stw	ra,4(sp)
  802c88:	df000015 	stw	fp,0(sp)
  802c8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802c90:	d0a00717 	ldw	r2,-32740(gp)
  802c94:	10000326 	beq	r2,zero,802ca4 <alt_get_errno+0x24>
  802c98:	d0a00717 	ldw	r2,-32740(gp)
  802c9c:	103ee83a 	callr	r2
  802ca0:	00000106 	br	802ca8 <alt_get_errno+0x28>
  802ca4:	d0a0e204 	addi	r2,gp,-31864
}
  802ca8:	e037883a 	mov	sp,fp
  802cac:	dfc00117 	ldw	ra,4(sp)
  802cb0:	df000017 	ldw	fp,0(sp)
  802cb4:	dec00204 	addi	sp,sp,8
  802cb8:	f800283a 	ret

00802cbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  802cbc:	defffa04 	addi	sp,sp,-24
  802cc0:	dfc00515 	stw	ra,20(sp)
  802cc4:	df000415 	stw	fp,16(sp)
  802cc8:	df000404 	addi	fp,sp,16
  802ccc:	e13ffe15 	stw	r4,-8(fp)
  802cd0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  802cd4:	e0bffe17 	ldw	r2,-8(fp)
  802cd8:	10000326 	beq	r2,zero,802ce8 <alt_dev_llist_insert+0x2c>
  802cdc:	e0bffe17 	ldw	r2,-8(fp)
  802ce0:	10800217 	ldw	r2,8(r2)
  802ce4:	1000061e 	bne	r2,zero,802d00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  802ce8:	0802c800 	call	802c80 <alt_get_errno>
  802cec:	1007883a 	mov	r3,r2
  802cf0:	00800584 	movi	r2,22
  802cf4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  802cf8:	00bffa84 	movi	r2,-22
  802cfc:	00001306 	br	802d4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  802d00:	e0bffe17 	ldw	r2,-8(fp)
  802d04:	e0ffff17 	ldw	r3,-4(fp)
  802d08:	e0fffc15 	stw	r3,-16(fp)
  802d0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802d10:	e0bffd17 	ldw	r2,-12(fp)
  802d14:	e0fffc17 	ldw	r3,-16(fp)
  802d18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802d1c:	e0bffc17 	ldw	r2,-16(fp)
  802d20:	10c00017 	ldw	r3,0(r2)
  802d24:	e0bffd17 	ldw	r2,-12(fp)
  802d28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802d2c:	e0bffc17 	ldw	r2,-16(fp)
  802d30:	10800017 	ldw	r2,0(r2)
  802d34:	e0fffd17 	ldw	r3,-12(fp)
  802d38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802d3c:	e0bffc17 	ldw	r2,-16(fp)
  802d40:	e0fffd17 	ldw	r3,-12(fp)
  802d44:	10c00015 	stw	r3,0(r2)

  return 0;  
  802d48:	0005883a 	mov	r2,zero
}
  802d4c:	e037883a 	mov	sp,fp
  802d50:	dfc00117 	ldw	ra,4(sp)
  802d54:	df000017 	ldw	fp,0(sp)
  802d58:	dec00204 	addi	sp,sp,8
  802d5c:	f800283a 	ret

00802d60 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  802d60:	defffa04 	addi	sp,sp,-24
  802d64:	dfc00515 	stw	ra,20(sp)
  802d68:	df000415 	stw	fp,16(sp)
  802d6c:	df000404 	addi	fp,sp,16
  802d70:	e13ffe15 	stw	r4,-8(fp)
  802d74:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  802d78:	e0bfff17 	ldw	r2,-4(fp)
  802d7c:	10800017 	ldw	r2,0(r2)
  802d80:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  802d84:	e13ffe17 	ldw	r4,-8(fp)
  802d88:	08032c80 	call	8032c8 <strlen>
  802d8c:	10800044 	addi	r2,r2,1
  802d90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  802d94:	00000d06 	br	802dcc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  802d98:	e0bffc17 	ldw	r2,-16(fp)
  802d9c:	10800217 	ldw	r2,8(r2)
  802da0:	e0fffd17 	ldw	r3,-12(fp)
  802da4:	180d883a 	mov	r6,r3
  802da8:	e17ffe17 	ldw	r5,-8(fp)
  802dac:	1009883a 	mov	r4,r2
  802db0:	08032980 	call	803298 <memcmp>
  802db4:	1000021e 	bne	r2,zero,802dc0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  802db8:	e0bffc17 	ldw	r2,-16(fp)
  802dbc:	00000706 	br	802ddc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  802dc0:	e0bffc17 	ldw	r2,-16(fp)
  802dc4:	10800017 	ldw	r2,0(r2)
  802dc8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  802dcc:	e0fffc17 	ldw	r3,-16(fp)
  802dd0:	e0bfff17 	ldw	r2,-4(fp)
  802dd4:	18bff01e 	bne	r3,r2,802d98 <_gp+0xffff7348>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  802dd8:	0005883a 	mov	r2,zero
}
  802ddc:	e037883a 	mov	sp,fp
  802de0:	dfc00117 	ldw	ra,4(sp)
  802de4:	df000017 	ldw	fp,0(sp)
  802de8:	dec00204 	addi	sp,sp,8
  802dec:	f800283a 	ret

00802df0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  802df0:	defffe04 	addi	sp,sp,-8
  802df4:	dfc00115 	stw	ra,4(sp)
  802df8:	df000015 	stw	fp,0(sp)
  802dfc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  802e00:	01408004 	movi	r5,512
  802e04:	0009883a 	mov	r4,zero
  802e08:	080314c0 	call	80314c <alt_icache_flush>
#endif
}
  802e0c:	0001883a 	nop
  802e10:	e037883a 	mov	sp,fp
  802e14:	dfc00117 	ldw	ra,4(sp)
  802e18:	df000017 	ldw	fp,0(sp)
  802e1c:	dec00204 	addi	sp,sp,8
  802e20:	f800283a 	ret

00802e24 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  802e24:	defff904 	addi	sp,sp,-28
  802e28:	dfc00615 	stw	ra,24(sp)
  802e2c:	df000515 	stw	fp,20(sp)
  802e30:	df000504 	addi	fp,sp,20
  802e34:	e13ffc15 	stw	r4,-16(fp)
  802e38:	e17ffd15 	stw	r5,-12(fp)
  802e3c:	e1bffe15 	stw	r6,-8(fp)
  802e40:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  802e44:	e0800217 	ldw	r2,8(fp)
  802e48:	d8800015 	stw	r2,0(sp)
  802e4c:	e1ffff17 	ldw	r7,-4(fp)
  802e50:	e1bffe17 	ldw	r6,-8(fp)
  802e54:	e17ffd17 	ldw	r5,-12(fp)
  802e58:	e13ffc17 	ldw	r4,-16(fp)
  802e5c:	0802fd40 	call	802fd4 <alt_iic_isr_register>
}  
  802e60:	e037883a 	mov	sp,fp
  802e64:	dfc00117 	ldw	ra,4(sp)
  802e68:	df000017 	ldw	fp,0(sp)
  802e6c:	dec00204 	addi	sp,sp,8
  802e70:	f800283a 	ret

00802e74 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  802e74:	defff904 	addi	sp,sp,-28
  802e78:	df000615 	stw	fp,24(sp)
  802e7c:	df000604 	addi	fp,sp,24
  802e80:	e13ffe15 	stw	r4,-8(fp)
  802e84:	e17fff15 	stw	r5,-4(fp)
  802e88:	e0bfff17 	ldw	r2,-4(fp)
  802e8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802e90:	0005303a 	rdctl	r2,status
  802e94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802e98:	e0fffb17 	ldw	r3,-20(fp)
  802e9c:	00bfff84 	movi	r2,-2
  802ea0:	1884703a 	and	r2,r3,r2
  802ea4:	1001703a 	wrctl	status,r2
  
  return context;
  802ea8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802eac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  802eb0:	00c00044 	movi	r3,1
  802eb4:	e0bffa17 	ldw	r2,-24(fp)
  802eb8:	1884983a 	sll	r2,r3,r2
  802ebc:	1007883a 	mov	r3,r2
  802ec0:	d0a0e017 	ldw	r2,-31872(gp)
  802ec4:	1884b03a 	or	r2,r3,r2
  802ec8:	d0a0e015 	stw	r2,-31872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802ecc:	d0a0e017 	ldw	r2,-31872(gp)
  802ed0:	100170fa 	wrctl	ienable,r2
  802ed4:	e0bffc17 	ldw	r2,-16(fp)
  802ed8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802edc:	e0bffd17 	ldw	r2,-12(fp)
  802ee0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802ee4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  802ee8:	0001883a 	nop
}
  802eec:	e037883a 	mov	sp,fp
  802ef0:	df000017 	ldw	fp,0(sp)
  802ef4:	dec00104 	addi	sp,sp,4
  802ef8:	f800283a 	ret

00802efc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  802efc:	defff904 	addi	sp,sp,-28
  802f00:	df000615 	stw	fp,24(sp)
  802f04:	df000604 	addi	fp,sp,24
  802f08:	e13ffe15 	stw	r4,-8(fp)
  802f0c:	e17fff15 	stw	r5,-4(fp)
  802f10:	e0bfff17 	ldw	r2,-4(fp)
  802f14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802f18:	0005303a 	rdctl	r2,status
  802f1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802f20:	e0fffb17 	ldw	r3,-20(fp)
  802f24:	00bfff84 	movi	r2,-2
  802f28:	1884703a 	and	r2,r3,r2
  802f2c:	1001703a 	wrctl	status,r2
  
  return context;
  802f30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802f34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  802f38:	00c00044 	movi	r3,1
  802f3c:	e0bffa17 	ldw	r2,-24(fp)
  802f40:	1884983a 	sll	r2,r3,r2
  802f44:	0084303a 	nor	r2,zero,r2
  802f48:	1007883a 	mov	r3,r2
  802f4c:	d0a0e017 	ldw	r2,-31872(gp)
  802f50:	1884703a 	and	r2,r3,r2
  802f54:	d0a0e015 	stw	r2,-31872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802f58:	d0a0e017 	ldw	r2,-31872(gp)
  802f5c:	100170fa 	wrctl	ienable,r2
  802f60:	e0bffc17 	ldw	r2,-16(fp)
  802f64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802f68:	e0bffd17 	ldw	r2,-12(fp)
  802f6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802f70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  802f74:	0001883a 	nop
}
  802f78:	e037883a 	mov	sp,fp
  802f7c:	df000017 	ldw	fp,0(sp)
  802f80:	dec00104 	addi	sp,sp,4
  802f84:	f800283a 	ret

00802f88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  802f88:	defffc04 	addi	sp,sp,-16
  802f8c:	df000315 	stw	fp,12(sp)
  802f90:	df000304 	addi	fp,sp,12
  802f94:	e13ffe15 	stw	r4,-8(fp)
  802f98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  802f9c:	000530fa 	rdctl	r2,ienable
  802fa0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  802fa4:	00c00044 	movi	r3,1
  802fa8:	e0bfff17 	ldw	r2,-4(fp)
  802fac:	1884983a 	sll	r2,r3,r2
  802fb0:	1007883a 	mov	r3,r2
  802fb4:	e0bffd17 	ldw	r2,-12(fp)
  802fb8:	1884703a 	and	r2,r3,r2
  802fbc:	1004c03a 	cmpne	r2,r2,zero
  802fc0:	10803fcc 	andi	r2,r2,255
}
  802fc4:	e037883a 	mov	sp,fp
  802fc8:	df000017 	ldw	fp,0(sp)
  802fcc:	dec00104 	addi	sp,sp,4
  802fd0:	f800283a 	ret

00802fd4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  802fd4:	defff504 	addi	sp,sp,-44
  802fd8:	dfc00a15 	stw	ra,40(sp)
  802fdc:	df000915 	stw	fp,36(sp)
  802fe0:	df000904 	addi	fp,sp,36
  802fe4:	e13ffc15 	stw	r4,-16(fp)
  802fe8:	e17ffd15 	stw	r5,-12(fp)
  802fec:	e1bffe15 	stw	r6,-8(fp)
  802ff0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  802ff4:	00bffa84 	movi	r2,-22
  802ff8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  802ffc:	e0bffd17 	ldw	r2,-12(fp)
  803000:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803004:	e0bff817 	ldw	r2,-32(fp)
  803008:	10800808 	cmpgei	r2,r2,32
  80300c:	1000271e 	bne	r2,zero,8030ac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803010:	0005303a 	rdctl	r2,status
  803014:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803018:	e0fffb17 	ldw	r3,-20(fp)
  80301c:	00bfff84 	movi	r2,-2
  803020:	1884703a 	and	r2,r3,r2
  803024:	1001703a 	wrctl	status,r2
  
  return context;
  803028:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80302c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  803030:	00802034 	movhi	r2,128
  803034:	108fa704 	addi	r2,r2,16028
  803038:	e0fff817 	ldw	r3,-32(fp)
  80303c:	180690fa 	slli	r3,r3,3
  803040:	10c5883a 	add	r2,r2,r3
  803044:	e0fffe17 	ldw	r3,-8(fp)
  803048:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80304c:	00802034 	movhi	r2,128
  803050:	108fa704 	addi	r2,r2,16028
  803054:	e0fff817 	ldw	r3,-32(fp)
  803058:	180690fa 	slli	r3,r3,3
  80305c:	10c5883a 	add	r2,r2,r3
  803060:	10800104 	addi	r2,r2,4
  803064:	e0ffff17 	ldw	r3,-4(fp)
  803068:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80306c:	e0bffe17 	ldw	r2,-8(fp)
  803070:	10000526 	beq	r2,zero,803088 <alt_iic_isr_register+0xb4>
  803074:	e0bff817 	ldw	r2,-32(fp)
  803078:	100b883a 	mov	r5,r2
  80307c:	e13ffc17 	ldw	r4,-16(fp)
  803080:	0802e740 	call	802e74 <alt_ic_irq_enable>
  803084:	00000406 	br	803098 <alt_iic_isr_register+0xc4>
  803088:	e0bff817 	ldw	r2,-32(fp)
  80308c:	100b883a 	mov	r5,r2
  803090:	e13ffc17 	ldw	r4,-16(fp)
  803094:	0802efc0 	call	802efc <alt_ic_irq_disable>
  803098:	e0bff715 	stw	r2,-36(fp)
  80309c:	e0bffa17 	ldw	r2,-24(fp)
  8030a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8030a4:	e0bff917 	ldw	r2,-28(fp)
  8030a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8030ac:	e0bff717 	ldw	r2,-36(fp)
}
  8030b0:	e037883a 	mov	sp,fp
  8030b4:	dfc00117 	ldw	ra,4(sp)
  8030b8:	df000017 	ldw	fp,0(sp)
  8030bc:	dec00204 	addi	sp,sp,8
  8030c0:	f800283a 	ret

008030c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8030c4:	defffe04 	addi	sp,sp,-8
  8030c8:	df000115 	stw	fp,4(sp)
  8030cc:	df000104 	addi	fp,sp,4
  8030d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8030d4:	e0bfff17 	ldw	r2,-4(fp)
  8030d8:	108000d0 	cmplti	r2,r2,3
  8030dc:	10000d1e 	bne	r2,zero,803114 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8030e0:	00802034 	movhi	r2,128
  8030e4:	108dfc04 	addi	r2,r2,14320
  8030e8:	e0ffff17 	ldw	r3,-4(fp)
  8030ec:	18c00324 	muli	r3,r3,12
  8030f0:	10c5883a 	add	r2,r2,r3
  8030f4:	10800204 	addi	r2,r2,8
  8030f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8030fc:	00802034 	movhi	r2,128
  803100:	108dfc04 	addi	r2,r2,14320
  803104:	e0ffff17 	ldw	r3,-4(fp)
  803108:	18c00324 	muli	r3,r3,12
  80310c:	10c5883a 	add	r2,r2,r3
  803110:	10000015 	stw	zero,0(r2)
  }
}
  803114:	0001883a 	nop
  803118:	e037883a 	mov	sp,fp
  80311c:	df000017 	ldw	fp,0(sp)
  803120:	dec00104 	addi	sp,sp,4
  803124:	f800283a 	ret

00803128 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  803128:	deffff04 	addi	sp,sp,-4
  80312c:	df000015 	stw	fp,0(sp)
  803130:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  803134:	000170fa 	wrctl	ienable,zero
}
  803138:	0001883a 	nop
  80313c:	e037883a 	mov	sp,fp
  803140:	df000017 	ldw	fp,0(sp)
  803144:	dec00104 	addi	sp,sp,4
  803148:	f800283a 	ret

0080314c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80314c:	defffb04 	addi	sp,sp,-20
  803150:	df000415 	stw	fp,16(sp)
  803154:	df000404 	addi	fp,sp,16
  803158:	e13ffe15 	stw	r4,-8(fp)
  80315c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  803160:	e0bfff17 	ldw	r2,-4(fp)
  803164:	10808070 	cmpltui	r2,r2,513
  803168:	1000021e 	bne	r2,zero,803174 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80316c:	00808004 	movi	r2,512
  803170:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  803174:	e0fffe17 	ldw	r3,-8(fp)
  803178:	e0bfff17 	ldw	r2,-4(fp)
  80317c:	1885883a 	add	r2,r3,r2
  803180:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  803184:	e0bffe17 	ldw	r2,-8(fp)
  803188:	e0bffc15 	stw	r2,-16(fp)
  80318c:	00000506 	br	8031a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  803190:	e0bffc17 	ldw	r2,-16(fp)
  803194:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  803198:	e0bffc17 	ldw	r2,-16(fp)
  80319c:	10800804 	addi	r2,r2,32
  8031a0:	e0bffc15 	stw	r2,-16(fp)
  8031a4:	e0fffc17 	ldw	r3,-16(fp)
  8031a8:	e0bffd17 	ldw	r2,-12(fp)
  8031ac:	18bff836 	bltu	r3,r2,803190 <_gp+0xffff7740>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8031b0:	e0bffe17 	ldw	r2,-8(fp)
  8031b4:	108007cc 	andi	r2,r2,31
  8031b8:	10000226 	beq	r2,zero,8031c4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8031bc:	e0bffc17 	ldw	r2,-16(fp)
  8031c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8031c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8031c8:	0001883a 	nop
  8031cc:	e037883a 	mov	sp,fp
  8031d0:	df000017 	ldw	fp,0(sp)
  8031d4:	dec00104 	addi	sp,sp,4
  8031d8:	f800283a 	ret

008031dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8031dc:	defffe04 	addi	sp,sp,-8
  8031e0:	df000115 	stw	fp,4(sp)
  8031e4:	df000104 	addi	fp,sp,4
  8031e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  8031ec:	e0bfff17 	ldw	r2,-4(fp)
  8031f0:	10bffe84 	addi	r2,r2,-6
  8031f4:	10c00428 	cmpgeui	r3,r2,16
  8031f8:	18001a1e 	bne	r3,zero,803264 <alt_exception_cause_generated_bad_addr+0x88>
  8031fc:	100690ba 	slli	r3,r2,2
  803200:	00802034 	movhi	r2,128
  803204:	108c8504 	addi	r2,r2,12820
  803208:	1885883a 	add	r2,r3,r2
  80320c:	10800017 	ldw	r2,0(r2)
  803210:	1000683a 	jmp	r2
  803214:	00803254 	movui	r2,201
  803218:	00803254 	movui	r2,201
  80321c:	00803264 	muli	r2,zero,201
  803220:	00803264 	muli	r2,zero,201
  803224:	00803264 	muli	r2,zero,201
  803228:	00803254 	movui	r2,201
  80322c:	0080325c 	xori	r2,zero,201
  803230:	00803264 	muli	r2,zero,201
  803234:	00803254 	movui	r2,201
  803238:	00803254 	movui	r2,201
  80323c:	00803264 	muli	r2,zero,201
  803240:	00803254 	movui	r2,201
  803244:	0080325c 	xori	r2,zero,201
  803248:	00803264 	muli	r2,zero,201
  80324c:	00803264 	muli	r2,zero,201
  803250:	00803254 	movui	r2,201
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  803254:	00800044 	movi	r2,1
  803258:	00000306 	br	803268 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80325c:	0005883a 	mov	r2,zero
  803260:	00000106 	br	803268 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  803264:	0005883a 	mov	r2,zero
  }
}
  803268:	e037883a 	mov	sp,fp
  80326c:	df000017 	ldw	fp,0(sp)
  803270:	dec00104 	addi	sp,sp,4
  803274:	f800283a 	ret

00803278 <exit>:
  803278:	defffe04 	addi	sp,sp,-8
  80327c:	000b883a 	mov	r5,zero
  803280:	dc000015 	stw	r16,0(sp)
  803284:	dfc00115 	stw	ra,4(sp)
  803288:	2021883a 	mov	r16,r4
  80328c:	08032e40 	call	8032e4 <__call_exitprocs>
  803290:	8009883a 	mov	r4,r16
  803294:	08034740 	call	803474 <_exit>

00803298 <memcmp>:
  803298:	218d883a 	add	r6,r4,r6
  80329c:	21800826 	beq	r4,r6,8032c0 <memcmp+0x28>
  8032a0:	20800003 	ldbu	r2,0(r4)
  8032a4:	28c00003 	ldbu	r3,0(r5)
  8032a8:	10c00226 	beq	r2,r3,8032b4 <memcmp+0x1c>
  8032ac:	10c5c83a 	sub	r2,r2,r3
  8032b0:	f800283a 	ret
  8032b4:	21000044 	addi	r4,r4,1
  8032b8:	29400044 	addi	r5,r5,1
  8032bc:	003ff706 	br	80329c <_gp+0xffff784c>
  8032c0:	0005883a 	mov	r2,zero
  8032c4:	f800283a 	ret

008032c8 <strlen>:
  8032c8:	2005883a 	mov	r2,r4
  8032cc:	10c00007 	ldb	r3,0(r2)
  8032d0:	18000226 	beq	r3,zero,8032dc <strlen+0x14>
  8032d4:	10800044 	addi	r2,r2,1
  8032d8:	003ffc06 	br	8032cc <_gp+0xffff787c>
  8032dc:	1105c83a 	sub	r2,r2,r4
  8032e0:	f800283a 	ret

008032e4 <__call_exitprocs>:
  8032e4:	defff504 	addi	sp,sp,-44
  8032e8:	dd000515 	stw	r20,20(sp)
  8032ec:	05002034 	movhi	r20,128
  8032f0:	dc800315 	stw	r18,12(sp)
  8032f4:	dfc00a15 	stw	ra,40(sp)
  8032f8:	df000915 	stw	fp,36(sp)
  8032fc:	ddc00815 	stw	r23,32(sp)
  803300:	dd800715 	stw	r22,28(sp)
  803304:	dd400615 	stw	r21,24(sp)
  803308:	dcc00415 	stw	r19,16(sp)
  80330c:	dc400215 	stw	r17,8(sp)
  803310:	dc000115 	stw	r16,4(sp)
  803314:	d9000015 	stw	r4,0(sp)
  803318:	2825883a 	mov	r18,r5
  80331c:	a50e9d04 	addi	r20,r20,14964
  803320:	a4400017 	ldw	r17,0(r20)
  803324:	8cc00c17 	ldw	r19,48(r17)
  803328:	8c400c04 	addi	r17,r17,48
  80332c:	98004526 	beq	r19,zero,803444 <__call_exitprocs+0x160>
  803330:	9c000117 	ldw	r16,4(r19)
  803334:	00900034 	movhi	r2,16384
  803338:	10bfffc4 	addi	r2,r2,-1
  80333c:	9d402217 	ldw	r21,136(r19)
  803340:	85bfffc4 	addi	r22,r16,-1
  803344:	80a1883a 	add	r16,r16,r2
  803348:	8421883a 	add	r16,r16,r16
  80334c:	8421883a 	add	r16,r16,r16
  803350:	ac2f883a 	add	r23,r21,r16
  803354:	84000204 	addi	r16,r16,8
  803358:	9c21883a 	add	r16,r19,r16
  80335c:	b0002716 	blt	r22,zero,8033fc <__call_exitprocs+0x118>
  803360:	90000726 	beq	r18,zero,803380 <__call_exitprocs+0x9c>
  803364:	a800041e 	bne	r21,zero,803378 <__call_exitprocs+0x94>
  803368:	b5bfffc4 	addi	r22,r22,-1
  80336c:	bdffff04 	addi	r23,r23,-4
  803370:	843fff04 	addi	r16,r16,-4
  803374:	003ff906 	br	80335c <_gp+0xffff790c>
  803378:	b9002017 	ldw	r4,128(r23)
  80337c:	913ffa1e 	bne	r18,r4,803368 <_gp+0xffff7918>
  803380:	99000117 	ldw	r4,4(r19)
  803384:	82000017 	ldw	r8,0(r16)
  803388:	213fffc4 	addi	r4,r4,-1
  80338c:	b100021e 	bne	r22,r4,803398 <__call_exitprocs+0xb4>
  803390:	9d800115 	stw	r22,4(r19)
  803394:	00000106 	br	80339c <__call_exitprocs+0xb8>
  803398:	80000015 	stw	zero,0(r16)
  80339c:	403ff226 	beq	r8,zero,803368 <_gp+0xffff7918>
  8033a0:	9f000117 	ldw	fp,4(r19)
  8033a4:	a8000526 	beq	r21,zero,8033bc <__call_exitprocs+0xd8>
  8033a8:	00800044 	movi	r2,1
  8033ac:	1592983a 	sll	r9,r2,r22
  8033b0:	a9404017 	ldw	r5,256(r21)
  8033b4:	494a703a 	and	r5,r9,r5
  8033b8:	2800021e 	bne	r5,zero,8033c4 <__call_exitprocs+0xe0>
  8033bc:	403ee83a 	callr	r8
  8033c0:	00000906 	br	8033e8 <__call_exitprocs+0x104>
  8033c4:	a9004117 	ldw	r4,260(r21)
  8033c8:	4908703a 	and	r4,r9,r4
  8033cc:	2000041e 	bne	r4,zero,8033e0 <__call_exitprocs+0xfc>
  8033d0:	b9400017 	ldw	r5,0(r23)
  8033d4:	d9000017 	ldw	r4,0(sp)
  8033d8:	403ee83a 	callr	r8
  8033dc:	00000206 	br	8033e8 <__call_exitprocs+0x104>
  8033e0:	b9000017 	ldw	r4,0(r23)
  8033e4:	403ee83a 	callr	r8
  8033e8:	99000117 	ldw	r4,4(r19)
  8033ec:	e13fcc1e 	bne	fp,r4,803320 <_gp+0xffff78d0>
  8033f0:	89000017 	ldw	r4,0(r17)
  8033f4:	993fdc26 	beq	r19,r4,803368 <_gp+0xffff7918>
  8033f8:	003fc906 	br	803320 <_gp+0xffff78d0>
  8033fc:	00800034 	movhi	r2,0
  803400:	10800004 	addi	r2,r2,0
  803404:	10000f26 	beq	r2,zero,803444 <__call_exitprocs+0x160>
  803408:	99400117 	ldw	r5,4(r19)
  80340c:	99000017 	ldw	r4,0(r19)
  803410:	2800091e 	bne	r5,zero,803438 <__call_exitprocs+0x154>
  803414:	20000826 	beq	r4,zero,803438 <__call_exitprocs+0x154>
  803418:	89000015 	stw	r4,0(r17)
  80341c:	a8000226 	beq	r21,zero,803428 <__call_exitprocs+0x144>
  803420:	a809883a 	mov	r4,r21
  803424:	00000000 	call	0 <__alt_mem_sdram_controller_0>
  803428:	9809883a 	mov	r4,r19
  80342c:	00000000 	call	0 <__alt_mem_sdram_controller_0>
  803430:	8cc00017 	ldw	r19,0(r17)
  803434:	003fbd06 	br	80332c <_gp+0xffff78dc>
  803438:	9823883a 	mov	r17,r19
  80343c:	2027883a 	mov	r19,r4
  803440:	003fba06 	br	80332c <_gp+0xffff78dc>
  803444:	dfc00a17 	ldw	ra,40(sp)
  803448:	df000917 	ldw	fp,36(sp)
  80344c:	ddc00817 	ldw	r23,32(sp)
  803450:	dd800717 	ldw	r22,28(sp)
  803454:	dd400617 	ldw	r21,24(sp)
  803458:	dd000517 	ldw	r20,20(sp)
  80345c:	dcc00417 	ldw	r19,16(sp)
  803460:	dc800317 	ldw	r18,12(sp)
  803464:	dc400217 	ldw	r17,8(sp)
  803468:	dc000117 	ldw	r16,4(sp)
  80346c:	dec00b04 	addi	sp,sp,44
  803470:	f800283a 	ret

00803474 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  803474:	defffd04 	addi	sp,sp,-12
  803478:	df000215 	stw	fp,8(sp)
  80347c:	df000204 	addi	fp,sp,8
  803480:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  803484:	0001883a 	nop
  803488:	e0bfff17 	ldw	r2,-4(fp)
  80348c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  803490:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  803494:	10000226 	beq	r2,zero,8034a0 <_exit+0x2c>
    ALT_SIM_FAIL();
  803498:	002af070 	cmpltui	zero,zero,43969
  80349c:	00000106 	br	8034a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8034a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8034a4:	003fff06 	br	8034a4 <_gp+0xffff7a54>
